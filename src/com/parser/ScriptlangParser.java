/* ScriptlangParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ScriptlangParser.java */
                               /** ScriptLangParser Class - BEGIN **/
package com.parser;

import com.parser.nodes.Node_PrimitiveType.PrimitiveType;
import com.parser.nodes.Node_Literal.LiteralType;
import com.parser.nodes.Node_Expression.ExpressionType;

public class ScriptlangParser/*@bgen(jjtree)*/implements ScriptlangParserTreeConstants, ScriptlangParserConstants {/*@bgen(jjtree)*/
  protected JJTScriptlangParserState jjtree = new JJTScriptlangParserState();/** Get the root node of the AST **/
    public Node rootNode() {
        return jjtree.rootNode();
    }

/**-----------------**/
/** Root production **/
/**-----------------**/
  final public void _Root() throws ParseException {/*@bgen(jjtree) _Root */
  AST_Root jjtn000 = new AST_Root(JJT_ROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:
        case FN:
        case CLASS:
        case STRUCT:
        case 40:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        _All();
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _All() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      _BlockUnit();
      break;
      }
    case 40:{
      _Statement();
      break;
      }
    case U8:
    case U16:
    case U32:
    case U64:
    case I8:
    case I16:
    case I32:
    case I64:
    case F32:
    case F64:
    case BOOL:
    case CHAR:
    case USIZE:
    case ISIZE:
    case AUTO:
    case ARRAY:
    case FN:
    case CLASS:
    case STRUCT:{
      _Declaration();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**-------------------------**/
/** Higher level constructs **/
/**-------------------------**/
  final public void _BlockUnit() throws ParseException {/*@bgen(jjtree) _BlockUnit */
  AST_BlockUnit jjtn000 = new AST_BlockUnit(JJT_BLOCKUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:
        case FN:
        case CLASS:
        case STRUCT:
        case 40:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        _All();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void _Statement() throws ParseException {/*@bgen(jjtree) _Statement */
  AST_Statement jjtn000 = new AST_Statement(JJT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(40);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration() throws ParseException {
    if (jj_2_1(3)) {
      _Declaration_Variable();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:
      case FN:{
        _Declaration_Function();
        break;
        }
      case CLASS:{
        _Declaration_Class();
        break;
        }
      case STRUCT:{
        _Declaration_Struct();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**----------------------------------**/
/** Lower level *generic* constructs **/
/**----------------------------------**/
  final public void _Declaration_Variable() throws ParseException {/*@bgen(jjtree) _Declaration_Variable */
  AST_Declaration_Variable jjtn000 = new AST_Declaration_Variable(JJT_DECLARATION_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      _Type_Primitive();
      _Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LITERAL_INT_BIN:
      case LITERAL_INT_OCT:
      case LITERAL_INT_DEC:
      case LITERAL_INT_HEX:
      case LITERAL_FLOAT32:
      case LITERAL_FLOAT64:
      case LITERAL_BOOL:
      case IDENTIFIER:
      case 41:
      case 43:{
        _Assignment();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(40);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Function() throws ParseException {/*@bgen(jjtree) _Declaration_Function */
  AST_Declaration_Function jjtn000 = new AST_Declaration_Function(JJT_DECLARATION_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:{
        _Type_Primitive();
        break;
        }
      case FN:{
        jj_consume_token(FN);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(41);
      jj_consume_token(42);
      _BlockUnit();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Class() throws ParseException {/*@bgen(jjtree) _Declaration_Class */
  AST_Declaration_Class jjtn000 = new AST_Declaration_Class(JJT_DECLARATION_CLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CLASS);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Struct() throws ParseException {/*@bgen(jjtree) _Declaration_Struct */
  AST_Declaration_Struct jjtn000 = new AST_Declaration_Struct(JJT_DECLARATION_STRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STRUCT);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));

    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Expression() throws ParseException {/*@bgen(jjtree) _Expression */
  AST_Expression jjtn000 = new AST_Expression(JJT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_2(3)) {
        _Expression_Primary();
        _Assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LITERAL_INT_BIN:
        case LITERAL_INT_OCT:
        case LITERAL_INT_DEC:
        case LITERAL_INT_HEX:
        case LITERAL_FLOAT32:
        case LITERAL_FLOAT64:
        case LITERAL_BOOL:
        case IDENTIFIER:
        case 41:
        case 60:
        case 61:{
          _Expression_CondOr(jjtn000);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Assignment() throws ParseException {/*@bgen(jjtree) _Assignment */
  AST_Assignment jjtn000 = new AST_Assignment(JJT_ASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LITERAL_INT_BIN:
      case LITERAL_INT_OCT:
      case LITERAL_INT_DEC:
      case LITERAL_INT_HEX:
      case LITERAL_FLOAT32:
      case LITERAL_FLOAT64:
      case LITERAL_BOOL:
      case IDENTIFIER:
      case 41:{
        _Expression_Primary();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(43);
      _Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Identifier() throws ParseException {/*@bgen(jjtree) _Identifier */
  AST_Identifier jjtn000 = new AST_Identifier(JJT_IDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setIdentifier(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Literal() throws ParseException {/*@bgen(jjtree) _Literal */
  AST_Literal jjtn000 = new AST_Literal(JJT_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LITERAL_INT_BIN:{
        t = jj_consume_token(LITERAL_INT_BIN);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.INT_BIN);
        break;
        }
      case LITERAL_INT_OCT:{
        /* Binary integer      */
                t = jj_consume_token(LITERAL_INT_OCT);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.INT_OCT);
        break;
        }
      case LITERAL_INT_DEC:{
        /* Octal integer       */
                t = jj_consume_token(LITERAL_INT_DEC);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.INT_DEC);
        break;
        }
      case LITERAL_INT_HEX:{
        /* Decimal integer     */
                t = jj_consume_token(LITERAL_INT_HEX);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.INT_HEX);
        break;
        }
      case LITERAL_FLOAT32:{
        /* Hexadecimal integer */
                t = jj_consume_token(LITERAL_FLOAT32);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.FLOAT32);
        break;
        }
      case LITERAL_FLOAT64:{
        /* 32-bit float        */
                t = jj_consume_token(LITERAL_FLOAT64);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.FLOAT64);
        break;
        }
      case LITERAL_BOOL:{
        /* 64-bit float        */
                t = jj_consume_token(LITERAL_BOOL);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.BOOL);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/**--------------------------------------**/
/**--------------------------------------**/
/** Lower level *specialised* constructs **/
/**--------------------------------------**/
/**--------------------------------------**/

/**-------------**/
/** Expressions **/
/**-------------**/
  final public void _Expression_CondOr(SimpleNode n) throws ParseException {
    _Expression_CondAnd(n);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 44:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(44);
      _Expression_CondAnd(n);
n.setExpr("||", ExpressionType.CONDOR);
    }
  }

  final public void _Expression_CondAnd(SimpleNode n) throws ParseException {
    _Expression_IncOr(n);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(45);
      _Expression_IncOr(n);
n.setExpr("&&", ExpressionType.CONDAND);
    }
  }

  final public void _Expression_IncOr(SimpleNode n) throws ParseException {
    _Expression_ExOr(n);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 46:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(46);
      _Expression_ExOr(n);
n.setExpr("|", ExpressionType.INCOR);
    }
  }

  final public void _Expression_ExOr(SimpleNode n) throws ParseException {
    _Expression_And(n);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(47);
      _Expression_And(n);
n.setExpr("^", ExpressionType.EXOR);
    }
  }

  final public void _Expression_And(SimpleNode n) throws ParseException {
    _Expression_Equal(n);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 48:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      jj_consume_token(48);
      _Expression_Equal(n);
n.setExpr("&", ExpressionType.AND);
    }
  }

  final public void _Expression_Equal(SimpleNode n) throws ParseException {
    _Expression_Relational(n);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:
      case 50:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        jj_consume_token(49);
        _Expression_Relational(n);
n.setExpr("==", ExpressionType.EQUAL);
        break;
        }
      case 50:{
        jj_consume_token(50);
        _Expression_Relational(n);
n.setExpr("!=", ExpressionType.EQUAL);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Relational(SimpleNode n) throws ParseException {
    _Expression_Additive(n);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 51:
      case 52:
      case 53:
      case 54:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 51:{
        jj_consume_token(51);
        _Expression_Additive(n);
n.setExpr("<",  ExpressionType.REL);
        break;
        }
      case 52:{
        jj_consume_token(52);
        _Expression_Additive(n);
n.setExpr(">",  ExpressionType.REL);
        break;
        }
      case 53:{
        jj_consume_token(53);
        _Expression_Additive(n);
n.setExpr("<=", ExpressionType.REL);
        break;
        }
      case 54:{
        jj_consume_token(54);
        _Expression_Additive(n);
n.setExpr(">=", ExpressionType.REL);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Additive(SimpleNode n) throws ParseException {
    _Expression_Multiplicative(n);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:
      case 56:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:{
        jj_consume_token(55);
        _Expression_Multiplicative(n);
n.setExpr("+",  ExpressionType.ADD);
        break;
        }
      case 56:{
        jj_consume_token(56);
        _Expression_Multiplicative(n);
n.setExpr("-",  ExpressionType.ADD);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Multiplicative(SimpleNode n) throws ParseException {
    _Expression_Unary(n);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 57:
      case 58:
      case 59:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 57:{
        jj_consume_token(57);
        _Expression_Unary(n);
n.setExpr("*",  ExpressionType.MUL);
        break;
        }
      case 58:{
        jj_consume_token(58);
        _Expression_Unary(n);
n.setExpr("/",  ExpressionType.MUL);
        break;
        }
      case 59:{
        jj_consume_token(59);
        _Expression_Unary(n);
n.setExpr("%",  ExpressionType.MUL);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Unary(SimpleNode n) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 60:{
      jj_consume_token(60);
      _Expression_Unary(n);
n.setExpr("~",  ExpressionType.UNARY);
      break;
      }
    case 61:{
      jj_consume_token(61);
      _Expression_Unary(n);
n.setExpr("!",  ExpressionType.UNARY);
      break;
      }
    case LITERAL_INT_BIN:
    case LITERAL_INT_OCT:
    case LITERAL_INT_DEC:
    case LITERAL_INT_HEX:
    case LITERAL_FLOAT32:
    case LITERAL_FLOAT64:
    case LITERAL_BOOL:
    case IDENTIFIER:
    case 41:{
      _Expression_Primary();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void _Expression_Primary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LITERAL_INT_BIN:
    case LITERAL_INT_OCT:
    case LITERAL_INT_DEC:
    case LITERAL_INT_HEX:
    case LITERAL_FLOAT32:
    case LITERAL_FLOAT64:
    case LITERAL_BOOL:{
      _Literal();
      break;
      }
    case IDENTIFIER:{
      _Identifier();
      break;
      }
    case 41:{
      jj_consume_token(41);
      _Expression();
      jj_consume_token(42);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**------------**/
/** Statements **/
/**------------**/
  final public void _Statement_Labeled() throws ParseException {/*@bgen(jjtree) _Statement_Labeled */
  AST_Statement_Labeled jjtn000 = new AST_Statement_Labeled(JJT_STATEMENT_LABELED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      _Identifier();
      jj_consume_token(62);
      _Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/**-------**/

/**-------**/
/** Types **/
/**-------**/
  final public void _Type_Primitive() throws ParseException {/*@bgen(jjtree) _Type_Primitive */
  AST_Type_Primitive jjtn000 = new AST_Type_Primitive(JJT_TYPE_PRIMITIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:{
        t = jj_consume_token(U8);
        break;
        }
      case U16:{
        t = jj_consume_token(U16);
        break;
        }
      case U32:{
        t = jj_consume_token(U32);
        break;
        }
      case U64:{
        t = jj_consume_token(U64);
        break;
        }
      case I8:{
        t = jj_consume_token(I8);
        break;
        }
      case I16:{
        t = jj_consume_token(I16);
        break;
        }
      case I32:{
        t = jj_consume_token(I32);
        break;
        }
      case I64:{
        t = jj_consume_token(I64);
        break;
        }
      case F32:{
        t = jj_consume_token(F32);
        break;
        }
      case F64:{
        t = jj_consume_token(F64);
        break;
        }
      case BOOL:{
        t = jj_consume_token(BOOL);
        break;
        }
      case CHAR:{
        t = jj_consume_token(CHAR);
        break;
        }
      case USIZE:{
        t = jj_consume_token(USIZE);
        break;
        }
      case ISIZE:{
        t = jj_consume_token(ISIZE);
        break;
        }
      case AUTO:{
        t = jj_consume_token(AUTO);
        break;
        }
      case ARRAY:{
        t = jj_consume_token(ARRAY);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setPrimitiveType(t.image, PrimitiveType.values()[t.kind - U8 + 1]);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(60)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(59)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(ARRAY)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(41)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(LITERAL_BOOL)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(LITERAL_FLOAT64)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(LITERAL_FLOAT32)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(LITERAL_INT_HEX)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(LITERAL_INT_DEC)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(LITERAL_INT_OCT)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(LITERAL_INT_BIN)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ScriptlangParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x807fffa0,0x807fffa0,0x807fffa0,0x807fff80,0x7f000000,0x807fff80,0x7f000000,0x7f000000,0x7f000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f000000,0x7f000000,0x7fff80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x103,0x103,0x103,0x3,0xa04,0x0,0x30000204,0x204,0x0,0x1000,0x2000,0x4000,0x8000,0x10000,0x60000,0x60000,0x780000,0x780000,0x1800000,0x1800000,0xe000000,0xe000000,0x30000204,0x204,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ScriptlangParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ScriptlangParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScriptlangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ScriptlangParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScriptlangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ScriptlangParser(ScriptlangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ScriptlangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
