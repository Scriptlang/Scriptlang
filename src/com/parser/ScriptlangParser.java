/* ScriptlangParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ScriptlangParser.java */
                               /** ScriptLangParser Class - BEGIN **/
package com.parser;

import com.parser.nodes.Node_TypePrimitive.TypePrimitive;
import com.parser.nodes.Node_TypeModifier.TypeModifier;
import com.parser.nodes.Node_Literal.LiteralType;
import com.parser.nodes.Node_Expression.ExpressionType;

public class ScriptlangParser/*@bgen(jjtree)*/implements ScriptlangParserTreeConstants, ScriptlangParserConstants {/*@bgen(jjtree)*/
  protected JJTScriptlangParserState jjtree = new JJTScriptlangParserState();/** Get the root node of the AST **/
    public Node rootNode() {
        return jjtree.rootNode();
    }

/**-----------------**/
/** Root production **/
/**-----------------**/
  final public void _Root() throws ParseException {/*@bgen(jjtree) _Root */
  AST_Root jjtn000 = new AST_Root(JJT_ROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:
        case LITERAL_INT_BIN:
        case LITERAL_INT_OCT:
        case LITERAL_INT_DEC:
        case LITERAL_INT_HEX:
        case LITERAL_FLOAT32:
        case LITERAL_FLOAT64:
        case LITERAL_BOOL:
        case FN:
        case CLASS:
        case STRUCT:
        case ENUM:
        case PUB:
        case PRIV:
        case IF:
        case SWITCH:
        case IDENTIFIER:
        case 50:
        case 52:
        case 75:
        case 76:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        _All();
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _All() throws ParseException {Token t = null;
    if (jj_2_2(3)) {
      _Identifier();
      jj_consume_token(49);
    } else if (jj_2_3(2)) {
      _BlockUnit();
    } else if (jj_2_4(3)) {
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
      }
      if (jj_2_1(2)) {
        t = jj_consume_token(50);
      } else {
        ;
      }
jjtn001.setExpr("(null)", ExpressionType.BLOB, (t == null));
    } else if (jj_2_5(2)) {
      _Statement();
    } else if (jj_2_6(2)) {
      _Declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUB:
      case PRIV:{
        _Type_Modifier();
        jj_consume_token(49);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**-------------------------**/
/** Higher level constructs **/
/**-------------------------**/
  final public void _BlockUnit() throws ParseException {/*@bgen(jjtree) _BlockUnit */
  AST_BlockUnit jjtn000 = new AST_BlockUnit(JJT_BLOCKUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        _Identifier();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:
        case LITERAL_INT_BIN:
        case LITERAL_INT_OCT:
        case LITERAL_INT_DEC:
        case LITERAL_INT_HEX:
        case LITERAL_FLOAT32:
        case LITERAL_FLOAT64:
        case LITERAL_BOOL:
        case FN:
        case CLASS:
        case STRUCT:
        case ENUM:
        case PUB:
        case PRIV:
        case IF:
        case SWITCH:
        case IDENTIFIER:
        case 50:
        case 52:
        case 75:
        case 76:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        _All();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void _Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 50:{
      jj_consume_token(50);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_7(2)) {
        _Expression_Primary();
        _Assignment();
        jj_consume_token(50);
      } else if (jj_2_8(3)) {
        _Statement_If();
      } else if (jj_2_9(3)) {
        _Statement_Switch();
      } else if (jj_2_10(3)) {
        _Statement_For();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          _Statement_While();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void _Declaration() throws ParseException {
    if (jj_2_11(2)) {
      _Declaration_Variable();
    } else if (jj_2_12(2)) {
      _Declaration_Function();
    } else if (jj_2_13(2)) {
      _Declaration_Class();
    } else if (jj_2_14(2)) {
      _Declaration_Struct();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENUM:
      case PUB:
      case PRIV:{
        _Declaration_Enum();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**----------------------------------**/
/** Lower level *generic* constructs **/
/**----------------------------------**/
  final public void _Declaration_Variable() throws ParseException {/*@bgen(jjtree) _Declaration_Variable */
  AST_Declaration_Variable jjtn000 = new AST_Declaration_Variable(JJT_DECLARATION_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUB:
      case PRIV:{
        _Type_Modifier();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      _Type_Primitive();
      _Identifier();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 51:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(51);
        _Identifier();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:
      case LITERAL_INT_BIN:
      case LITERAL_INT_OCT:
      case LITERAL_INT_DEC:
      case LITERAL_INT_HEX:
      case LITERAL_FLOAT32:
      case LITERAL_FLOAT64:
      case LITERAL_BOOL:
      case IF:
      case SWITCH:
      case IDENTIFIER:
      case 52:
      case 56:{
        _Assignment();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(50);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Function() throws ParseException {/*@bgen(jjtree) _Declaration_Function */
  AST_Declaration_Function jjtn000 = new AST_Declaration_Function(JJT_DECLARATION_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUB:
      case PRIV:{
        _Type_Modifier();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:
      case FN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:{
          _Type_Primitive();
          break;
          }
        case FN:{
          jj_consume_token(FN);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      _Identifier();
      jj_consume_token(52);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:{
        _Declaration_Parameter_List();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(53);
      _BlockUnit();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Function_Lambda() throws ParseException {/*@bgen(jjtree) _Declaration_Function_Lambda */
  AST_Declaration_Function_Lambda jjtn000 = new AST_Declaration_Function_Lambda(JJT_DECLARATION_FUNCTION_LAMBDA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUB:
      case PRIV:{
        _Type_Modifier();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      _Type_Primitive();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        _Identifier();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(52);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:{
        _Declaration_Parameter_List();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(53);
      _BlockUnit();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Function_Lambda_Nomod() throws ParseException {/*@bgen(jjtree) _Declaration_Function_Lambda_Nomod */
  AST_Declaration_Function_Lambda_Nomod jjtn000 = new AST_Declaration_Function_Lambda_Nomod(JJT_DECLARATION_FUNCTION_LAMBDA_NOMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      _Type_Primitive();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        _Identifier();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(52);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:{
        _Declaration_Parameter_List();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(53);
      if (jj_2_15(2)) {
        _BlockUnit();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Struct() throws ParseException {/*@bgen(jjtree) _Declaration_Struct */
  AST_Declaration_Struct jjtn000 = new AST_Declaration_Struct(JJT_DECLARATION_STRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUB:
      case PRIV:{
        _Type_Modifier();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(STRUCT);
      _Identifier();
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:
        case FN:
        case CLASS:
        case STRUCT:
        case ENUM:
        case PUB:
        case PRIV:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_4;
        }
        _Declaration();
      }
      jj_consume_token(RBRACE);
      jj_consume_token(50);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Class() throws ParseException {/*@bgen(jjtree) _Declaration_Class */
  AST_Declaration_Class jjtn000 = new AST_Declaration_Class(JJT_DECLARATION_CLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUB:
      case PRIV:{
        _Type_Modifier();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(CLASS);
      _Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        jj_consume_token(49);
AST_Declaration_Class_Inheritance jjtn001 = new AST_Declaration_Class_Inheritance(JJT_DECLARATION_CLASS_INHERITANCE);
                                                            boolean jjtc001 = true;
                                                            jjtree.openNodeScope(jjtn001);
                                                            jjtn001.jjtSetFirstToken(getToken(1));
        try {
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PUB:
            case PRIV:{
              _Type_Modifier();
              break;
              }
            default:
              jj_la1[22] = jj_gen;
              ;
            }
            _Identifier();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 51:{
              jj_consume_token(51);
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              ;
            }
            if (jj_2_16(2)) {
              ;
            } else {
              break label_5;
            }
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                                                              jjtree.clearNodeScope(jjtn001);
                                                              jjtc001 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte001 instanceof RuntimeException) {
                                                              {if (true) throw (RuntimeException)jjte001;}
                                                            }
                                                            if (jjte001 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte001;}
                                                            }
                                                            {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                                              jjtree.closeNodeScope(jjtn001, true);
                                                              jjtn001.jjtSetLastToken(getToken(0));
                                                            }
        }
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      _BlockUnit();
      jj_consume_token(50);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Enum() throws ParseException {/*@bgen(jjtree) _Declaration_Enum */
  AST_Declaration_Enum jjtn000 = new AST_Declaration_Enum(JJT_DECLARATION_ENUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUB:
      case PRIV:{
        _Type_Modifier();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(ENUM);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        _Identifier();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:
      case STRUCT:
      case IDENTIFIER:
      case 52:{
        _Declaration_EnumBody_List();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      jj_consume_token(50);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_EnumBody_List() throws ParseException {
    label_6:
    while (true) {
      _Declaration_EnumBody();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 51:{
        jj_consume_token(51);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:
      case STRUCT:
      case IDENTIFIER:
      case 52:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_6;
      }
    }
  }

  final public void _Declaration_EnumBody() throws ParseException {
    if (jj_2_17(3)) {
      _Declaration_Tuple();
    } else if (jj_2_18(3)) {
      _Declaration_EnumBody_Struct();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRUCT:{
        _Declaration_EnumBody_Struct_Bodyless();
        break;
        }
      case IDENTIFIER:{
        _Declaration_EnumBody_Const();
        break;
        }
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:{
        _Declaration_Function_Lambda_Nomod();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Declaration_EnumBody_Const() throws ParseException {/*@bgen(jjtree) _Declaration_EnumBody_Const */
  AST_Declaration_EnumBody_Const jjtn000 = new AST_Declaration_EnumBody_Const(JJT_DECLARATION_ENUMBODY_CONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      _Identifier();
      if (jj_2_19(2)) {
        _Assignment();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_EnumBody_Struct() throws ParseException {/*@bgen(jjtree) _Declaration_EnumBody_Struct */
  AST_Declaration_EnumBody_Struct jjtn000 = new AST_Declaration_EnumBody_Struct(JJT_DECLARATION_ENUMBODY_STRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRUCT:{
        jj_consume_token(STRUCT);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      _Identifier();
      jj_consume_token(LBRACE);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:
        case FN:
        case CLASS:
        case STRUCT:
        case ENUM:
        case PUB:
        case PRIV:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_7;
        }
        _Declaration();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_EnumBody_Struct_Bodyless() throws ParseException {/*@bgen(jjtree) _Declaration_EnumBody_Struct_Bodyless */
  AST_Declaration_EnumBody_Struct_Bodyless jjtn000 = new AST_Declaration_EnumBody_Struct_Bodyless(JJT_DECLARATION_ENUMBODY_STRUCT_BODYLESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STRUCT);
      _Identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Tuple() throws ParseException {/*@bgen(jjtree) _Declaration_Tuple */
  AST_Declaration_Tuple jjtn000 = new AST_Declaration_Tuple(JJT_DECLARATION_TUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        _Identifier();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(52);
      label_8:
      while (true) {
        _Declaration_TypeList();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_8;
        }
      }
      jj_consume_token(53);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Bind() throws ParseException {/*@bgen(jjtree) _Declaration_Bind */
  AST_Declaration_Bind jjtn000 = new AST_Declaration_Bind(JJT_DECLARATION_BIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIND:
      case IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          _Identifier();
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        jj_consume_token(BIND);
        break;
        }
      case 54:{
        jj_consume_token(54);
        label_9:
        while (true) {
          if (jj_2_20(2)) {
            _Identifier();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BIND:
            case IDENTIFIER:
            case 54:{
              _Declaration_Bind();
              break;
              }
            default:
              jj_la1[36] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 51:{
            jj_consume_token(51);
            break;
            }
          default:
            jj_la1[37] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BIND:
          case IDENTIFIER:
          case 54:{
            ;
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            break label_9;
          }
        }
        jj_consume_token(55);
        jj_consume_token(BIND);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_TypeList() throws ParseException {/*@bgen(jjtree) _Declaration_TypeList */
  AST_Declaration_TypeList jjtn000 = new AST_Declaration_TypeList(JJT_DECLARATION_TYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_10:
      while (true) {
        _Type_Primitive();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 51:{
          jj_consume_token(51);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        if (jj_2_21(2)) {
          ;
        } else {
          break label_10;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Parameter_List() throws ParseException {/*@bgen(jjtree) _Declaration_Parameter_List */
  AST_Declaration_Parameter_List jjtn000 = new AST_Declaration_Parameter_List(JJT_DECLARATION_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_11:
      while (true) {
        _Declaration_Parameter_Single();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 51:{
          jj_consume_token(51);
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:{
          ;
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          break label_11;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Parameter_Single() throws ParseException {/*@bgen(jjtree) _Declaration_Parameter_Single */
  AST_Declaration_Parameter_Single jjtn000 = new AST_Declaration_Parameter_Single(JJT_DECLARATION_PARAMETER_SINGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      _Type_Primitive();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        _Identifier();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Declaration_Parameter_Caller_List() throws ParseException {/*@bgen(jjtree) _Declaration_Parameter_Caller_List */
  AST_Declaration_Parameter_Caller_List jjtn000 = new AST_Declaration_Parameter_Caller_List(JJT_DECLARATION_PARAMETER_CALLER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case LITERAL_INT_BIN:
        case LITERAL_INT_OCT:
        case LITERAL_INT_DEC:
        case LITERAL_INT_HEX:
        case LITERAL_FLOAT32:
        case LITERAL_FLOAT64:
        case LITERAL_BOOL:
        case IF:
        case SWITCH:
        case IDENTIFIER:
        case 52:
        case 75:
        case 76:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_12;
        }
AST_Declaration_Parameter_Caller_Single jjtn001 = new AST_Declaration_Parameter_Caller_Single(JJT_DECLARATION_PARAMETER_CALLER_SINGLE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
        try {
          _Expression();
        } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 51:{
          jj_consume_token(51);
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Expression() throws ParseException {
    if (jj_2_22(3)) {
      _Expression_CondOr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:
      case LITERAL_INT_BIN:
      case LITERAL_INT_OCT:
      case LITERAL_INT_DEC:
      case LITERAL_INT_HEX:
      case LITERAL_FLOAT32:
      case LITERAL_FLOAT64:
      case LITERAL_BOOL:
      case IF:
      case SWITCH:
      case IDENTIFIER:
      case 52:{
        _Expression_Primary();
        _Assignment();
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Assignment() throws ParseException {/*@bgen(jjtree) _Assignment */
  AST_Assignment jjtn000 = new AST_Assignment(JJT_ASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:
      case LITERAL_INT_BIN:
      case LITERAL_INT_OCT:
      case LITERAL_INT_DEC:
      case LITERAL_INT_HEX:
      case LITERAL_FLOAT32:
      case LITERAL_FLOAT64:
      case LITERAL_BOOL:
      case IF:
      case SWITCH:
      case IDENTIFIER:
      case 52:{
        _Expression_Primary();
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(56);
      _Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Identifier() throws ParseException {/*@bgen(jjtree) _Identifier */
  AST_Identifier jjtn000 = new AST_Identifier(JJT_IDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setIdentifier(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Literal() throws ParseException {/*@bgen(jjtree) _Literal */
  AST_Literal jjtn000 = new AST_Literal(JJT_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LITERAL_INT_BIN:{
        t = jj_consume_token(LITERAL_INT_BIN);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.INT_BIN);
        break;
        }
      case LITERAL_INT_OCT:{
        /* Binary integer      */
                t = jj_consume_token(LITERAL_INT_OCT);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.INT_OCT);
        break;
        }
      case LITERAL_INT_DEC:{
        /* Octal integer       */
                t = jj_consume_token(LITERAL_INT_DEC);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.INT_DEC);
        break;
        }
      case LITERAL_INT_HEX:{
        /* Decimal integer     */
                t = jj_consume_token(LITERAL_INT_HEX);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.INT_HEX);
        break;
        }
      case LITERAL_FLOAT32:{
        /* Hexadecimal integer */
                t = jj_consume_token(LITERAL_FLOAT32);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.FLOAT32);
        break;
        }
      case LITERAL_FLOAT64:{
        /* 32-bit float        */
                t = jj_consume_token(LITERAL_FLOAT64);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.FLOAT64);
        break;
        }
      case LITERAL_BOOL:{
        /* 64-bit float        */
                t = jj_consume_token(LITERAL_BOOL);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setLiteral(t.image, LiteralType.BOOL);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/******************************************/
/**--------------------------------------**/
/** Lower level *specialised* constructs **/
/**--------------------------------------**/
/******************************************/

/**-------------**/
/** Expressions **/
/**-------------**/
  final public void _Expression_CondOr() throws ParseException {
    _Expression_CondAnd();
    label_13:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(57);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression_CondAnd();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      {if (true) throw (RuntimeException)jjte001;}
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      {if (true) throw (ParseException)jjte001;}
                                                    }
                                                    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                      jjtn001.jjtSetLastToken(getToken(0));
                                                    }
      }
jjtn001.setExpr("||", ExpressionType.CONDOR);
    }
  }

  final public void _Expression_CondAnd() throws ParseException {
    _Expression_IncOr();
    label_14:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(58);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression_IncOr();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                    jjtree.clearNodeScope(jjtn001);
                                                    jjtc001 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte001 instanceof RuntimeException) {
                                                    {if (true) throw (RuntimeException)jjte001;}
                                                  }
                                                  if (jjte001 instanceof ParseException) {
                                                    {if (true) throw (ParseException)jjte001;}
                                                  }
                                                  {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001, true);
                                                    jjtn001.jjtSetLastToken(getToken(0));
                                                  }
      }
jjtn001.setExpr("&&", ExpressionType.CONDAND);
    }
  }

  final public void _Expression_IncOr() throws ParseException {
    _Expression_ExOr();
    label_15:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_15;
      }
      jj_consume_token(59);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression_ExOr();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                  jjtree.clearNodeScope(jjtn001);
                                                  jjtc001 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte001 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte001;}
                                                }
                                                if (jjte001 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte001;}
                                                }
                                                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001, true);
                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                }
      }
jjtn001.setExpr("|", ExpressionType.INCOR);
    }
  }

  final public void _Expression_ExOr() throws ParseException {
    _Expression_And();
    label_16:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(60);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                               jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression_And();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                 jjtree.clearNodeScope(jjtn001);
                                                 jjtc001 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte001 instanceof RuntimeException) {
                                                 {if (true) throw (RuntimeException)jjte001;}
                                               }
                                               if (jjte001 instanceof ParseException) {
                                                 {if (true) throw (ParseException)jjte001;}
                                               }
                                               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001, true);
                                                 jjtn001.jjtSetLastToken(getToken(0));
                                               }
      }
jjtn001.setExpr("^", ExpressionType.EXOR);
    }
  }

  final public void _Expression_And() throws ParseException {
    _Expression_Equal();
    label_17:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_17;
      }
      jj_consume_token(61);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression_Equal();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                   jjtree.clearNodeScope(jjtn001);
                                                   jjtc001 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte001 instanceof RuntimeException) {
                                                   {if (true) throw (RuntimeException)jjte001;}
                                                 }
                                                 if (jjte001 instanceof ParseException) {
                                                   {if (true) throw (ParseException)jjte001;}
                                                 }
                                                 {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
      }
jjtn001.setExpr("&", ExpressionType.AND);
    }
  }

  final public void _Expression_Equal() throws ParseException {
    _Expression_Relational();
    label_18:
    while (true) {
      if (jj_2_28(2)) {
        ;
      } else {
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 62:{
        jj_consume_token(62);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Relational();
        } catch (Throwable jjte001) {
if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
        }
jjtn001.setExpr("==", ExpressionType.EQUAL);
        break;
        }
      case 63:{
        jj_consume_token(63);
AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtn002.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Relational();
        } catch (Throwable jjte002) {
if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtn002.jjtSetLastToken(getToken(0));
               }
        }
jjtn002.setExpr("!=", ExpressionType.EQUAL);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Relational() throws ParseException {
    _Expression_Shift();
    label_19:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 64:{
        jj_consume_token(64);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Shift();
        } catch (Throwable jjte001) {
if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
        }
jjtn001.setExpr("<",  ExpressionType.REL);
        break;
        }
      case 65:{
        jj_consume_token(65);
AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Shift();
        } catch (Throwable jjte002) {
if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
        }
jjtn002.setExpr(">",  ExpressionType.REL);
        break;
        }
      case 66:{
        jj_consume_token(66);
AST_Expression jjtn003 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Shift();
        } catch (Throwable jjte003) {
if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte003;}
                   }
                   if (jjte003 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte003;}
                   }
                   {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
        }
jjtn003.setExpr("<=", ExpressionType.REL);
        break;
        }
      case 67:{
        jj_consume_token(67);
AST_Expression jjtn004 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                   jjtn004.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Shift();
        } catch (Throwable jjte004) {
if (jjtc004) {
                     jjtree.clearNodeScope(jjtn004);
                     jjtc004 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte004 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte004;}
                   }
                   if (jjte004 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte004;}
                   }
                   {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtn004.jjtSetLastToken(getToken(0));
                   }
        }
jjtn004.setExpr(">=", ExpressionType.REL);
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Shift() throws ParseException {
    _Expression_Additive();
    label_20:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 68:{
        jj_consume_token(68);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Additive();
        } catch (Throwable jjte001) {
if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
        }
jjtn001.setExpr("<<",  ExpressionType.SHT);
        break;
        }
      case 69:{
        jj_consume_token(69);
AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Additive();
        } catch (Throwable jjte002) {
if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
        }
jjtn002.setExpr(">>",  ExpressionType.SHT);
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Additive() throws ParseException {
    _Expression_Multiplicative();
    label_21:
    while (true) {
      if (jj_2_31(2)) {
        ;
      } else {
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 70:{
        jj_consume_token(70);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Multiplicative();
        } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
        }
jjtn001.setExpr("+",  ExpressionType.ADD);
        break;
        }
      case 71:{
        jj_consume_token(71);
AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Multiplicative();
        } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
              }
        }
jjtn002.setExpr("-",  ExpressionType.ADD);
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Multiplicative() throws ParseException {
    _Expression_Cast();
    label_22:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 72:{
        jj_consume_token(72);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Cast();
        } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
        }
jjtn001.setExpr("*",  ExpressionType.MUL);
        break;
        }
      case 73:{
        jj_consume_token(73);
AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Cast();
        } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
              }
        }
jjtn002.setExpr("/",  ExpressionType.MUL);
        break;
        }
      case 74:{
        jj_consume_token(74);
AST_Expression jjtn003 = new AST_Expression(JJT_EXPRESSION);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtn003.jjtSetFirstToken(getToken(1));
        try {
          _Expression_Cast();
        } catch (Throwable jjte003) {
if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtn003.jjtSetLastToken(getToken(0));
                  }
        }
jjtn003.setExpr("%",  ExpressionType.MUL);
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Cast() throws ParseException {Token t;
    if (jj_2_33(2)) {
      jj_consume_token(52);
      t = _Type_Suffix();
      jj_consume_token(53);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression_Unary();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                    jjtree.clearNodeScope(jjtn001);
                                                    jjtc001 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte001 instanceof RuntimeException) {
                                                    {if (true) throw (RuntimeException)jjte001;}
                                                  }
                                                  if (jjte001 instanceof ParseException) {
                                                    {if (true) throw (ParseException)jjte001;}
                                                  }
                                                  {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001, true);
                                                    jjtn001.jjtSetLastToken(getToken(0));
                                                  }
      }
jjtn001.setExpr("(" + t.image + ")",  ExpressionType.CAST);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:
      case LITERAL_INT_BIN:
      case LITERAL_INT_OCT:
      case LITERAL_INT_DEC:
      case LITERAL_INT_HEX:
      case LITERAL_FLOAT32:
      case LITERAL_FLOAT64:
      case LITERAL_BOOL:
      case IF:
      case SWITCH:
      case IDENTIFIER:
      case 52:
      case 75:
      case 76:{
        _Expression_Unary();
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void _Expression_Unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 75:{
      jj_consume_token(75);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression_Unary();
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
              }
      }
jjtn001.setExpr("~",  ExpressionType.UNARY);
      break;
      }
    case 76:{
      jj_consume_token(76);
AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
      try {
        _Expression_Unary();
      } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
              }
      }
jjtn002.setExpr("!",  ExpressionType.UNARY);
      break;
      }
    case LBRACE:
    case LITERAL_INT_BIN:
    case LITERAL_INT_OCT:
    case LITERAL_INT_DEC:
    case LITERAL_INT_HEX:
    case LITERAL_FLOAT32:
    case LITERAL_FLOAT64:
    case LITERAL_BOOL:
    case IF:
    case SWITCH:
    case IDENTIFIER:
    case 52:{
      _Expression_Primary();
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void _Expression_Primary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LITERAL_INT_BIN:
    case LITERAL_INT_OCT:
    case LITERAL_INT_DEC:
    case LITERAL_INT_HEX:
    case LITERAL_FLOAT32:
    case LITERAL_FLOAT64:
    case LITERAL_BOOL:{
      _Literal();
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      if (jj_2_35(2)) {
        _Identifier();
        if (jj_2_34(2)) {
          jj_consume_token(52);
          _Declaration_Parameter_Caller_List();
          jj_consume_token(53);
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 52:{
          jj_consume_token(52);
          _Expression();
          jj_consume_token(53);
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          if (jj_2_36(2)) {
            _BlockUnit();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IF:{
              _Statement_If();
              break;
              }
            case SWITCH:{
              _Statement_Switch();
              break;
              }
            default:
              jj_la1[58] = jj_gen;
              if (jj_2_37(2)) {
                _Statement_For();
              } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case IDENTIFIER:{
                  _Statement_While();
                  break;
                  }
                default:
                  jj_la1[59] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
  }

/**------------**/
/** Statements **/
/**------------**/
  final public void _Statement_If() throws ParseException {/*@bgen(jjtree) _Statement_If */
  AST_Statement_If jjtn000 = new AST_Statement_If(JJT_STATEMENT_IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(52);
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
      }
      jj_consume_token(53);
AST_Statement_If_True jjtn002 = new AST_Statement_If_True(JJT_STATEMENT_IF_TRUE);
                                                    boolean jjtc002 = true;
                                                    jjtree.openNodeScope(jjtn002);
                                                    jjtn002.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_38(3)) {
          _BlockUnit();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACE:
          case U8:
          case U16:
          case U32:
          case U64:
          case I8:
          case I16:
          case I32:
          case I64:
          case F32:
          case F64:
          case BOOL:
          case CHAR:
          case USIZE:
          case ISIZE:
          case AUTO:
          case ARRAY:
          case LITERAL_INT_BIN:
          case LITERAL_INT_OCT:
          case LITERAL_INT_DEC:
          case LITERAL_INT_HEX:
          case LITERAL_FLOAT32:
          case LITERAL_FLOAT64:
          case LITERAL_BOOL:
          case FN:
          case CLASS:
          case STRUCT:
          case ENUM:
          case PUB:
          case PRIV:
          case IF:
          case SWITCH:
          case IDENTIFIER:
          case 50:
          case 52:
          case 75:
          case 76:{
            _All();
            break;
            }
          default:
            jj_la1[60] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                      jjtree.clearNodeScope(jjtn002);
                                                      jjtc002 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte002 instanceof RuntimeException) {
                                                      {if (true) throw (RuntimeException)jjte002;}
                                                    }
                                                    if (jjte002 instanceof ParseException) {
                                                      {if (true) throw (ParseException)jjte002;}
                                                    }
                                                    {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                      jjtree.closeNodeScope(jjtn002, true);
                                                      jjtn002.jjtSetLastToken(getToken(0));
                                                    }
      }
      if (jj_2_40(2)) {
        jj_consume_token(ELSE);
AST_Statement_If_False jjtn003 = new AST_Statement_If_False(JJT_STATEMENT_IF_FALSE);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                                jjtn003.jjtSetFirstToken(getToken(1));
        try {
          if (jj_2_39(3)) {
            _BlockUnit();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LBRACE:
            case U8:
            case U16:
            case U32:
            case U64:
            case I8:
            case I16:
            case I32:
            case I64:
            case F32:
            case F64:
            case BOOL:
            case CHAR:
            case USIZE:
            case ISIZE:
            case AUTO:
            case ARRAY:
            case LITERAL_INT_BIN:
            case LITERAL_INT_OCT:
            case LITERAL_INT_DEC:
            case LITERAL_INT_HEX:
            case LITERAL_FLOAT32:
            case LITERAL_FLOAT64:
            case LITERAL_BOOL:
            case FN:
            case CLASS:
            case STRUCT:
            case ENUM:
            case PUB:
            case PRIV:
            case IF:
            case SWITCH:
            case IDENTIFIER:
            case 50:
            case 52:
            case 75:
            case 76:{
              _All();
              break;
              }
            default:
              jj_la1[61] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } catch (Throwable jjte003) {
if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte003;}
                                }
                                if (jjte003 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte003;}
                                }
                                {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, true);
                                  jjtn003.jjtSetLastToken(getToken(0));
                                }
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Statement_Switch() throws ParseException {/*@bgen(jjtree) _Statement_Switch */
  AST_Statement_Switch jjtn000 = new AST_Statement_Switch(JJT_STATEMENT_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(52);
AST_Statement_Switch_Match_List jjtn001 = new AST_Statement_Switch_Match_List(JJT_STATEMENT_SWITCH_MATCH_LIST);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        label_23:
        while (true) {
          _Statement_Switch_Match_Single();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 51:{
            jj_consume_token(51);
            break;
            }
          default:
            jj_la1[62] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACE:
          case U8:
          case U16:
          case U32:
          case U64:
          case I8:
          case I16:
          case I32:
          case I64:
          case F32:
          case F64:
          case BOOL:
          case CHAR:
          case USIZE:
          case ISIZE:
          case AUTO:
          case ARRAY:
          case LITERAL_INT_BIN:
          case LITERAL_INT_OCT:
          case LITERAL_INT_DEC:
          case LITERAL_INT_HEX:
          case LITERAL_FLOAT32:
          case LITERAL_FLOAT64:
          case LITERAL_BOOL:
          case IF:
          case SWITCH:
          case IDENTIFIER:
          case 52:
          case 75:
          case 76:{
            ;
            break;
            }
          default:
            jj_la1[63] = jj_gen;
            break label_23;
          }
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
      }
      jj_consume_token(53);
      jj_consume_token(LBRACE);
AST_Statement_Switch_Line_List jjtn002 = new AST_Statement_Switch_Line_List(JJT_STATEMENT_SWITCH_LINE_LIST);
                                                                                                                  boolean jjtc002 = true;
                                                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                                                  jjtn002.jjtSetFirstToken(getToken(1));
      try {
        label_24:
        while (true) {
          _Statement_Switch_Line();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 51:{
            jj_consume_token(51);
            break;
            }
          default:
            jj_la1[64] = jj_gen;
            ;
          }
          if (jj_2_41(2)) {
            ;
          } else {
            break label_24;
          }
        }
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                                                                                    jjtree.clearNodeScope(jjtn002);
                                                                                                                    jjtc002 = false;
                                                                                                                  } else {
                                                                                                                    jjtree.popNode();
                                                                                                                  }
                                                                                                                  if (jjte002 instanceof RuntimeException) {
                                                                                                                    {if (true) throw (RuntimeException)jjte002;}
                                                                                                                  }
                                                                                                                  if (jjte002 instanceof ParseException) {
                                                                                                                    {if (true) throw (ParseException)jjte002;}
                                                                                                                  }
                                                                                                                  {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                                                                    jjtn002.jjtSetLastToken(getToken(0));
                                                                                                                  }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Statement_Switch_Line() throws ParseException {/*@bgen(jjtree) _Statement_Switch_Line */
  AST_Statement_Switch_Line jjtn000 = new AST_Statement_Switch_Line(JJT_STATEMENT_SWITCH_LINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AST_Statement_Switch_Match_List jjtn001 = new AST_Statement_Switch_Match_List(JJT_STATEMENT_SWITCH_MATCH_LIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Declaration_Bind();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          jj_consume_token(ELSE);
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          label_25:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LBRACE:
            case U8:
            case U16:
            case U32:
            case U64:
            case I8:
            case I16:
            case I32:
            case I64:
            case F32:
            case F64:
            case BOOL:
            case CHAR:
            case USIZE:
            case ISIZE:
            case AUTO:
            case ARRAY:
            case LITERAL_INT_BIN:
            case LITERAL_INT_OCT:
            case LITERAL_INT_DEC:
            case LITERAL_INT_HEX:
            case LITERAL_FLOAT32:
            case LITERAL_FLOAT64:
            case LITERAL_BOOL:
            case IF:
            case SWITCH:
            case IDENTIFIER:
            case 52:
            case 75:
            case 76:{
              ;
              break;
              }
            default:
              jj_la1[65] = jj_gen;
              break label_25;
            }
            _Statement_Switch_Match_Single();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 51:{
              jj_consume_token(51);
              break;
              }
            default:
              jj_la1[66] = jj_gen;
              ;
            }
          }
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      jj_consume_token(49);
      if (jj_2_43(3)) {
AST_Statement_Switch_Line_Body_List jjtn002 = new AST_Statement_Switch_Line_Body_List(JJT_STATEMENT_SWITCH_LINE_BODY_LIST);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
        try {
          _BlockUnit();
        } catch (Throwable jjte002) {
if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte002;}
                         }
                         if (jjte002 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte002;}
                         }
                         {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case U8:
        case U16:
        case U32:
        case U64:
        case I8:
        case I16:
        case I32:
        case I64:
        case F32:
        case F64:
        case BOOL:
        case CHAR:
        case USIZE:
        case ISIZE:
        case AUTO:
        case ARRAY:
        case LITERAL_INT_BIN:
        case LITERAL_INT_OCT:
        case LITERAL_INT_DEC:
        case LITERAL_INT_HEX:
        case LITERAL_FLOAT32:
        case LITERAL_FLOAT64:
        case LITERAL_BOOL:
        case FN:
        case CLASS:
        case STRUCT:
        case ENUM:
        case PUB:
        case PRIV:
        case IF:
        case SWITCH:
        case IDENTIFIER:
        case 50:
        case 52:
        case 75:
        case 76:{
AST_Statement_Switch_Line_Body_List jjtn003 = new AST_Statement_Switch_Line_Body_List(JJT_STATEMENT_SWITCH_LINE_BODY_LIST);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtn003.jjtSetFirstToken(getToken(1));
          try {
            label_26:
            while (true) {
              _Statement_Switch_Line_Body_Single();
              if (jj_2_42(2)) {
                ;
              } else {
                break label_26;
              }
            }
          } catch (Throwable jjte003) {
if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtn003.jjtSetLastToken(getToken(0));
          }
          }
          break;
          }
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Statement_Switch_Match_Single() throws ParseException {/*@bgen(jjtree) _Statement_Switch_Match_Single */
  AST_Statement_Switch_Match_Single jjtn000 = new AST_Statement_Switch_Match_Single(JJT_STATEMENT_SWITCH_MATCH_SINGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:
      case LITERAL_INT_BIN:
      case LITERAL_INT_OCT:
      case LITERAL_INT_DEC:
      case LITERAL_INT_HEX:
      case LITERAL_FLOAT32:
      case LITERAL_FLOAT64:
      case LITERAL_BOOL:
      case IF:
      case SWITCH:
      case IDENTIFIER:
      case 52:
      case 75:
      case 76:{
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          _Expression();
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
        break;
        }
      case U8:
      case U16:
      case U32:
      case U64:
      case I8:
      case I16:
      case I32:
      case I64:
      case F32:
      case F64:
      case BOOL:
      case CHAR:
      case USIZE:
      case ISIZE:
      case AUTO:
      case ARRAY:{
        _Type_Primitive();
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Statement_Switch_Line_Body_Single() throws ParseException {Token t = null;
    if (jj_2_45(3)) {
AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        _Expression();
        if (jj_2_44(2)) {
          t = jj_consume_token(50);
        } else {
          ;
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
      }
jjtn001.setExpr("(null)", ExpressionType.BLOB, (t == null));
    } else if (jj_2_46(3)) {
      _Statement();
    } else if (jj_2_47(2)) {
      _Declaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void _Statement_For() throws ParseException {/*@bgen(jjtree) _Statement_For */
  AST_Statement_For jjtn000 = new AST_Statement_For(JJT_STATEMENT_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      _Identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void _Statement_While() throws ParseException {/*@bgen(jjtree) _Statement_While */
  AST_Statement_While jjtn000 = new AST_Statement_While(JJT_STATEMENT_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      _Identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/**-------**/
/** Types **/
/**-------**/
  final public void _Type_Primitive() throws ParseException {/*@bgen(jjtree) _Type_Primitive */
  AST_Type_Primitive jjtn000 = new AST_Type_Primitive(JJT_TYPE_PRIMITIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U8:{
        t = jj_consume_token(U8);
        break;
        }
      case U16:{
        t = jj_consume_token(U16);
        break;
        }
      case U32:{
        t = jj_consume_token(U32);
        break;
        }
      case U64:{
        t = jj_consume_token(U64);
        break;
        }
      case I8:{
        t = jj_consume_token(I8);
        break;
        }
      case I16:{
        t = jj_consume_token(I16);
        break;
        }
      case I32:{
        t = jj_consume_token(I32);
        break;
        }
      case I64:{
        t = jj_consume_token(I64);
        break;
        }
      case F32:{
        t = jj_consume_token(F32);
        break;
        }
      case F64:{
        t = jj_consume_token(F64);
        break;
        }
      case BOOL:{
        t = jj_consume_token(BOOL);
        break;
        }
      case CHAR:{
        t = jj_consume_token(CHAR);
        break;
        }
      case USIZE:{
        t = jj_consume_token(USIZE);
        break;
        }
      case ISIZE:{
        t = jj_consume_token(ISIZE);
        break;
        }
      case AUTO:{
        t = jj_consume_token(AUTO);
        break;
        }
      case ARRAY:{
        t = jj_consume_token(ARRAY);
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setTypePrimitive(t.image, TypePrimitive.values()[t.kind - U8 + 1]);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public Token _Type_Suffix() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case U8:{
      t = jj_consume_token(U8);
      break;
      }
    case U16:{
      t = jj_consume_token(U16);
      break;
      }
    case U32:{
      t = jj_consume_token(U32);
      break;
      }
    case U64:{
      t = jj_consume_token(U64);
      break;
      }
    case I8:{
      t = jj_consume_token(I8);
      break;
      }
    case I16:{
      t = jj_consume_token(I16);
      break;
      }
    case I32:{
      t = jj_consume_token(I32);
      break;
      }
    case I64:{
      t = jj_consume_token(I64);
      break;
      }
    case F32:{
      t = jj_consume_token(F32);
      break;
      }
    case F64:{
      t = jj_consume_token(F64);
      break;
      }
    case BOOL:{
      t = jj_consume_token(BOOL);
      break;
      }
    case CHAR:{
      t = jj_consume_token(CHAR);
      break;
      }
    case USIZE:{
      t = jj_consume_token(USIZE);
      break;
      }
    case ISIZE:{
      t = jj_consume_token(ISIZE);
      break;
      }
    case AUTO:{
      t = jj_consume_token(AUTO);
      break;
      }
    case ARRAY:{
      t = jj_consume_token(ARRAY);
      break;
      }
    case LITERAL_SUFFIX:{
      t = jj_consume_token(LITERAL_SUFFIX);
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void _Type_Modifier() throws ParseException {/*@bgen(jjtree) _Type_Modifier */
  AST_Type_Modifier jjtn000 = new AST_Type_Modifier(JJT_TYPE_MODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUB:{
        t = jj_consume_token(PUB);
        break;
        }
      case PRIV:{
        t = jj_consume_token(PRIV);
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setTypeModifier(t.image, TypeModifier.values()[t.kind - PUB + 1]);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(72)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(73)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(70)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(71)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(69)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(68)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(67)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(66)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(65)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(64)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(60)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(62)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(63)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(58)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(57)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_scan_token(LITERAL_BOOL)) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(LITERAL_FLOAT64)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(LITERAL_FLOAT32)) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(LITERAL_INT_HEX)) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(LITERAL_INT_DEC)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(LITERAL_INT_OCT)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(LITERAL_INT_BIN)) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_104()
 {
    Token xsp;
    if (jj_3_21()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(54)) return true;
    Token xsp;
    if (jj_3R_123()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_107()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_scan_token(BIND)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    if (jj_3R_88()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_scan_token(ENUM)) return true;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    if (jj_scan_token(STRUCT)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_3R_86()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3R_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(52)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(52)) return true;
    Token xsp;
    if (jj_3R_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(52)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(76)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(52)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public ScriptlangParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[73];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xff7fffa0,0x0,0x0,0xff7fffa0,0x0,0x0,0x0,0x0,0x0,0x7f000020,0x0,0x807fff80,0x807fff80,0x7fff80,0x0,0x0,0x7fff80,0x0,0x7fff80,0x0,0x807fff80,0x0,0x0,0x0,0x0,0x0,0x0,0x7fff80,0x0,0x7fff80,0x7fff80,0x0,0x807fff80,0x0,0x7fff80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fff80,0x0,0x7f000020,0x0,0x7f000020,0x7f000020,0x7f000000,0x0,0x0,0x0,0x0,0x0,0x7f000020,0x7f000020,0x7f000000,0x0,0x0,0x0,0xff7fffa0,0xff7fffa0,0x0,0x7f7fffa0,0x0,0x7f7fffa0,0x0,0x0,0xff7fffa0,0x7f7fffa0,0x7fff80,0xffff80,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1408bf,0x18,0x800,0x1408bf,0x40000,0x800,0x1c,0x18,0x80000,0x11008a0,0x18,0x0,0x0,0x0,0x18,0x800,0x0,0x800,0x0,0x18,0x81f,0x18,0x18,0x80000,0x20000,0x18,0x800,0x100802,0x80000,0x100802,0x802,0x2,0x81f,0x800,0x0,0x800,0x400c00,0x80000,0x400c00,0x400c00,0x80000,0x80000,0x0,0x800,0x1008a0,0x80000,0x1008a0,0x1008a0,0x0,0xc0000000,0x0,0x0,0x0,0x0,0x1008a0,0x1008a0,0x0,0x100000,0xa0,0x800,0x1408bf,0x1408bf,0x80000,0x1008a0,0x80000,0x1008a0,0x80000,0x40,0x1408bf,0x1008a0,0x0,0x0,0x18,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1800,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0xf,0x30,0xc0,0x700,0x1800,0x1800,0x0,0x0,0x0,0x0,0x1800,0x1800,0x0,0x1800,0x0,0x1800,0x0,0x0,0x1800,0x1800,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[47];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ScriptlangParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ScriptlangParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScriptlangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 73; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 73; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ScriptlangParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScriptlangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 73; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 73; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ScriptlangParser(ScriptlangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 73; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ScriptlangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 73; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[77];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 73; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 77; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 47; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
