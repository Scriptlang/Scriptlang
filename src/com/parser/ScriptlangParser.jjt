/**----------------**/
/** Parser options **/
/**----------------**/
options {
    LOOKAHEAD              = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK  = 1;
    STATIC                 = false;
    DEBUG_PARSER           = false;
    DEBUG_LOOKAHEAD        = false;
    DEBUG_TOKEN_MANAGER    = false;
    ERROR_REPORTING        = true;
    JAVA_UNICODE_ESCAPE    = false;
    UNICODE_INPUT          = false;
    IGNORE_CASE            = false;
    USER_TOKEN_MANAGER     = false;
    USER_CHAR_STREAM       = false;
    BUILD_PARSER           = true;
    BUILD_TOKEN_MANAGER    = true;
    SANITY_CHECK           = true;
    FORCE_LA_CHECK         = false;
    MULTI                  = true;
    NODE_EXTENDS           = "NodeSetter";
    TRACK_TOKENS           = true;
}

PARSER_BEGIN(ScriptlangParser) /** ScriptLangParser Class - BEGIN **/
package com.parser;

import org.javacc.jjtree.JJTree;
import com.parser.nodes.*;
import com.parser.nodes.Node_PrimitiveType.PrimitiveType;

public class ScriptlangParser {
    /** Get the root node of the AST **/
    public Node rootNode() {
    	return jjtree.rootNode();
    }
}

PARSER_END(ScriptlangParser) /** ScriptLangParser Class - END **/

/**--------------------**/
/** Token declarations **/
/**--------------------**/
SKIP :
{
	" "
|	"\t"
|	"\n"
|	"\r"
}

TOKEN :
{
	/* Block unit tokens */
	<LBRACE: "{">
|	<RBRACE: "}">

	/* Primitive data types. IMPORTANT: DO NOT CHANGE THE DECLARATION ORDER */
|	<U8:    "u8"   >
|	<U16:   "u16"  >
|	<U32:   "u32"  >
|	<U64:   "u64"  >
|	<I8:    "i8"   >
|	<I16:   "i16"  >
|	<I32:   "i32"  >
|	<I64:   "i64"  >
|	<F32:   "f32"  >
|	<F64:   "f64"  >
|	<BOOL:  "bool" >
|	<CHAR:  "char" >
|	<USIZE: "usize">
|	<ISIZE: "isize">
|	<AUTO:  "auto" >
|   <ARRAY: "array">

	/* Literals */
|	<INT_LITERAL: (<DIGIT>)+>

	/* Keywords */
|	<FN: "fn">         /* Return type void for function declaration */
|	<CLASS: "class">   /* Class declaration                         */
|	<STRUCT: "struct"> /* Struct declaration                        */

	/* Identifiers */
|	<IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)*>
|	<#LETTER: ["a"-"z", "A"-"Z"]>
|	<#DIGIT: ["0"-"9"]>
}

/**-----------------**/
/** Root production **/
/**-----------------**/
void _Root() :
{}
{
	( _All() )* <EOF>
}

void _All() #void : /* Matches any kind of top level construct               */
{}                  /* (blocks ({}), statements and any kind of declaration) */
{
	_BlockUnit() | _Statement() | _Declaration()
}

/**-------------------------**/
/** Higher level constructs **/
/**-------------------------**/
void _BlockUnit() :
{}
{
    <LBRACE> ( _All() )* <RBRACE>
}

void _Statement() :
{}
{
	";"
	{}
}

void _Declaration() #void : /* Any kind of declaration goes here */
{}
{
	( LOOKAHEAD(3) _Declaration_Variable() | /* Variables  */
      _Declaration_Function()              | /* Functions  */
      _Declaration_Class()                 | /* Classes    */
      _Declaration_Struct() )                /* Structures */
	{}
}

/**----------------------------------**/
/** Lower level *generic* constructs **/
/**----------------------------------**/
void _Declaration_Variable() : /* Variable declaration: <type> <var_name> <assignment>? ; */
{
	GenericNode t1;
	GenericNode t2;
}
{
	t1 = _Type_Primitive() t2 = _Identifier() ( _Assignment() )? ";" 
	{
		jjtThis.setVariable((Node_PrimitiveType)t1, (Node_Identifier)t2); /* Set full node data */
	}
}

void _Declaration_Function() : /* Function declaration: <type>|fn <func_name> (...) {...} */
{}
{
	( _Type_Primitive() | <FN> ) <IDENTIFIER> "(" ")" _BlockUnit()
	{}
}

void _Declaration_Class() :
{}
{
	<CLASS>
	{}
}

void _Declaration_Struct() :
{}
{
	<STRUCT>
	{}
}

void _Expression() : 
{}
{
	{}
}

void _Assignment() : 
{}
{
	"="
	{}
}

GenericNode _Identifier() : /* An identifier. (variable/function name for example) */
{ Token t; }
{
	t = <IDENTIFIER>
	{ 
		return jjtThis.setIdentifier(t.image);
	}
}

void _Literal() :
{}
{
	{}
}

/**--------------------------------------**/
/** Lower level *specialised* constructs **/
/**--------------------------------------**/

/**----------**/
/** Literals **/
/**----------**/

/**-------------**/
/** Expressions **/
/**-------------**/

/**------------**/
/** Statements **/
/**------------**/
void _Statement_Labeled() :
{}
{
	<IDENTIFIER> ":" _Statement()
	{}
}

/**-------**/
/** Types **/
/**-------**/
GenericNode _Type_Primitive() : /* All primitive data types are declared here */
{ Token t; }
{
	( t=<U8>    | t=<U16>   | t=<U32>  | t=<U64>    |
	  t=<I8>    | t=<I16>   | t=<I32>  | t=<I64>    |
	  t=<F32>   | t=<F64>   | t=<BOOL> | t=<CHAR>   |
	  t=<USIZE> | t=<ISIZE> | t=<AUTO> | t=<ARRAY>)
	{ return jjtThis.setPrimitiveType(t.image, PrimitiveType.values()[t.kind - U8 + 1]); }
}
