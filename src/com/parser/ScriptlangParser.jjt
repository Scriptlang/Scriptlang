/**----------------**/
/** Parser options **/
/**----------------**/
options {
    LOOKAHEAD              = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK  = 1;
    STATIC                 = false;
    DEBUG_PARSER           = false;
    DEBUG_LOOKAHEAD        = false;
    DEBUG_TOKEN_MANAGER    = false;
    ERROR_REPORTING        = true;
    JAVA_UNICODE_ESCAPE    = false;
    UNICODE_INPUT          = false;
    IGNORE_CASE            = false;
    USER_TOKEN_MANAGER     = false;
    USER_CHAR_STREAM       = false;
    BUILD_PARSER           = true;
    BUILD_TOKEN_MANAGER    = true;
    SANITY_CHECK           = true;
    FORCE_LA_CHECK         = false;
    MULTI                  = true;
    NODE_EXTENDS           = "NodeSetter";
    TRACK_TOKENS           = true;
}

PARSER_BEGIN(ScriptlangParser) /** ScriptLangParser Class - BEGIN **/
package com.parser;

import com.parser.nodes.Node_PrimitiveType.PrimitiveType;
import com.parser.nodes.Node_Literal.LiteralType;
import com.parser.nodes.Node_Expression.ExpressionType;

public class ScriptlangParser {
    /** Get the root node of the AST **/
    public Node rootNode() {
    	return jjtree.rootNode();
    }
}

PARSER_END(ScriptlangParser) /** ScriptLangParser Class - END **/

/**--------------------**/
/** Token declarations **/
/**--------------------**/
SKIP :
{
	" "
|	"\t"
|	"\n"
|	"\r"
}

TOKEN : /* IMPORTANT: !! DO NOT CHANGE THE TOKEN DECLARATION ORDER !! */
{
	/* Block unit tokens */
	<LBRACE: "{">
|	<RBRACE: "}">

	/* Primitive data types */
|	<U8:    "u8"   >
|	<U16:   "u16"  >
|	<U32:   "u32"  >
|	<U64:   "u64"  >
|	<I8:    "i8"   >
|	<I16:   "i16"  >
|	<I32:   "i32"  >
|	<I64:   "i64"  >
|	<F32:   "f32"  >
|	<F64:   "f64"  >
|	<BOOL:  "bool" >
|	<CHAR:  "char" >
|	<USIZE: "usize">
|	<ISIZE: "isize">
|	<AUTO:  "auto" >
|   <ARRAY: "array">
|   <LITERAL_SUFFIX: ("i" | "u" | "f" | "uz" | "iz") (<DIGIT_DEC>)+>

	/* Literals */
|	<LITERAL_INT_BIN: "0b" (<DIGIT_BIN>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_INT_OCT: "0" (<DIGIT_OCT>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_INT_DEC: (<DIGIT_DEC>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_INT_HEX: "0x" (<DIGIT_HEX>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_FLOAT32: (<DIGIT_DEC>)+ "." (<DIGIT_DEC>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_FLOAT64: (<DIGIT_DEC>)+ "." (<DIGIT_DEC>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_BOOL: ("true" | "false")>

	/* Keywords */
|	<FN: "fn">         /* Return type void for function declaration */
|	<CLASS: "class">   /* Class declaration                         */
|	<STRUCT: "struct"> /* Struct declaration                        */

	/* Identifiers */
|	<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT_BIN> | <DIGIT_OCT> | <DIGIT_DEC> | <DIGIT_HEX>)*>
|	<#LETTER: ["a"-"z", "A"-"Z"]>
|	<#DIGIT_BIN: ["0"-"1"]>
|	<#DIGIT_OCT: ["0"-"7"]>
|	<#DIGIT_DEC: ["0"-"9"]>
|	<#DIGIT_HEX: ["0"-"9", "a"-"z", "A"-"F"]>
}

/**-----------------**/
/** Root production **/
/**-----------------**/
void _Root() :
{}
{
	( _All() )* <EOF>
}

void _All() #void : /* Matches any kind of top level construct               */
{}                  /* (blocks ({}), statements and any kind of declaration) */
{
	_BlockUnit() | _Statement() | _Declaration()
}

/**-------------------------**/
/** Higher level constructs **/
/**-------------------------**/
void _BlockUnit() : {}
{
    <LBRACE> ( _All() )* <RBRACE>
}

void _Statement() :
{}
{
	";"
}

void _Declaration() #void : /* Any kind of declaration goes here */
{}
{
	LOOKAHEAD(3) _Declaration_Variable() | /* Variables  */
	_Declaration_Function()              | /* Functions  */
	_Declaration_Class()                 | /* Classes    */
	_Declaration_Struct()                  /* Structures */
}

/**----------------------------------**/
/** Lower level *generic* constructs **/
/**----------------------------------**/
void _Declaration_Variable() : {} /* Variable declaration: <type> <var_name> <assignment>? ; */
{
	_Type_Primitive() _Identifier() ( _Assignment() )? ";" 
}

void _Declaration_Function() : /* Function declaration: <type>|fn <func_name> (...) {...} */
{}
{
	( _Type_Primitive() | <FN> ) <IDENTIFIER> "(" ")" _BlockUnit()
}

void _Declaration_Class() :
{}
{
	<CLASS>
}

void _Declaration_Struct() :
{}
{
	<STRUCT>
	{}
}

void _Expression() : {}
{
	LOOKAHEAD(3) _Expression_Primary() _Assignment() | _Expression_CondOr(jjtThis)
}

void _Assignment() : {} /* Assignment: <prim_expr>? = <expr> */
{
	( _Expression_Primary() )? "=" _Expression()
}

void _Identifier() : /* An identifier. (variable/function name for example) */
{ Token t; }
{
	t = <IDENTIFIER>
	{
		jjtThis.setIdentifier(t.image);
	}
}

void _Literal() : /* Literal constants (signed/unsigned integer, float, boolean, char and string) */
{ Token t; }
{
	t = <LITERAL_INT_BIN> { jjtThis.setLiteral(t.image, LiteralType.INT_BIN); } | /* Binary integer      */
	t = <LITERAL_INT_OCT> { jjtThis.setLiteral(t.image, LiteralType.INT_OCT); } | /* Octal integer       */
	t = <LITERAL_INT_DEC> { jjtThis.setLiteral(t.image, LiteralType.INT_DEC); } | /* Decimal integer     */
	t = <LITERAL_INT_HEX> { jjtThis.setLiteral(t.image, LiteralType.INT_HEX); } | /* Hexadecimal integer */
	t = <LITERAL_FLOAT32> { jjtThis.setLiteral(t.image, LiteralType.FLOAT32); } | /* 32-bit float        */
	t = <LITERAL_FLOAT64> { jjtThis.setLiteral(t.image, LiteralType.FLOAT64); } | /* 64-bit float        */
	t = <LITERAL_BOOL>    { jjtThis.setLiteral(t.image, LiteralType.BOOL);    }   /* Boolean             */
}

/**--------------------------------------**/
/**--------------------------------------**/
/** Lower level *specialised* constructs **/
/**--------------------------------------**/
/**--------------------------------------**/

/**-------------**/
/** Expressions **/
/**-------------**/
void _Expression_CondOr(SimpleNode n) #void : {}
{
	_Expression_CondAnd(n) ( "||" _Expression_CondAnd(n) { n.setExpr("||", ExpressionType.CONDOR); } )*
}

void _Expression_CondAnd(SimpleNode n) #void : {}
{
	_Expression_IncOr(n) ( "&&" _Expression_IncOr(n) { n.setExpr("&&", ExpressionType.CONDAND); } )*
}

void _Expression_IncOr(SimpleNode n) #void : {}
{
	_Expression_ExOr(n) ( "|" _Expression_ExOr(n) { n.setExpr("|", ExpressionType.INCOR); } )*
}

void _Expression_ExOr(SimpleNode n) #void : {}
{
	_Expression_And(n) ( "^" _Expression_And(n) { n.setExpr("^", ExpressionType.EXOR); } )*
}

void _Expression_And(SimpleNode n) #void : {}
{
	_Expression_Equal(n) ( "&" _Expression_Equal(n) { n.setExpr("&", ExpressionType.AND); } )*
}

void _Expression_Equal(SimpleNode n) #void : {}
{
	_Expression_Relational(n)
	( "==" _Expression_Relational(n) { n.setExpr("==", ExpressionType.EQUAL); } |
      "!=" _Expression_Relational(n) { n.setExpr("!=", ExpressionType.EQUAL); } )*
}

void _Expression_Relational(SimpleNode n) #void : {}
{
	_Expression_Additive(n) 
	( "<"  _Expression_Additive(n) { n.setExpr("<",  ExpressionType.REL); } | 
	  ">"  _Expression_Additive(n) { n.setExpr(">",  ExpressionType.REL); } | 
	  "<=" _Expression_Additive(n) { n.setExpr("<=", ExpressionType.REL); } | 
	  ">=" _Expression_Additive(n) { n.setExpr(">=", ExpressionType.REL); } )*
}

void _Expression_Additive(SimpleNode n) #void : {}
{
	_Expression_Multiplicative(n)
	( "+" _Expression_Multiplicative(n) { n.setExpr("+",  ExpressionType.ADD); } |
      "-" _Expression_Multiplicative(n) { n.setExpr("-",  ExpressionType.ADD); } )*
}

void _Expression_Multiplicative(SimpleNode n) #void : {}
{
	_Expression_Unary(n)
	( "*" _Expression_Unary(n) { n.setExpr("*",  ExpressionType.MUL); } |
      "/" _Expression_Unary(n) { n.setExpr("/",  ExpressionType.MUL); } |
	  "%" _Expression_Unary(n) { n.setExpr("%",  ExpressionType.MUL); } )*
}

void _Expression_Unary(SimpleNode n) #void : {}
{
	"~" _Expression_Unary(n) { n.setExpr("~",  ExpressionType.UNARY); } |
	"!" _Expression_Unary(n) { n.setExpr("!",  ExpressionType.UNARY); } |
	_Expression_Primary()
}

void _Expression_Primary() #void : {} /* Primary Expression: <literal> | <identifier> | ( expression ) */
{
	_Literal() | _Identifier() | "(" _Expression() ")"
}

/**------------**/
/** Statements **/
/**------------**/
void _Statement_Labeled() : {}
{
	_Identifier() ":" _Statement()
}

/**-------**/

/**-------**/
/** Types **/
/**-------**/
void _Type_Primitive() : /* All primitive data types are declared here */
{ Token t; }
{
	t=<U8>    | t=<U16>   | t=<U32>  | t=<U64>  |
	t=<I8>    | t=<I16>   | t=<I32>  | t=<I64>  |
	t=<F32>   | t=<F64>   | t=<BOOL> | t=<CHAR> |
	t=<USIZE> | t=<ISIZE> | t=<AUTO> | t=<ARRAY>
	{ jjtThis.setPrimitiveType(t.image, PrimitiveType.values()[t.kind - U8 + 1]); }
}
