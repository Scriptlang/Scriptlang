/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ScriptlangParser.jj */
/*@egen*//**----------------**/
/** Parser options **/
/**----------------**/
options {
    LOOKAHEAD              = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK  = 1;
    STATIC                 = false;
    DEBUG_PARSER           = false;
    DEBUG_LOOKAHEAD        = false;
    DEBUG_TOKEN_MANAGER    = false;
    ERROR_REPORTING        = true;
    JAVA_UNICODE_ESCAPE    = false;
    UNICODE_INPUT          = false;
    IGNORE_CASE            = false;
    USER_TOKEN_MANAGER     = false;
    USER_CHAR_STREAM       = false;
    BUILD_PARSER           = true;
    BUILD_TOKEN_MANAGER    = true;
    SANITY_CHECK           = true;
    FORCE_LA_CHECK         = false;
                                  
                                          
                                  
}

PARSER_BEGIN(ScriptlangParser) /** ScriptLangParser Class - BEGIN **/
package com.parser;

import com.parser.nodes.Node_PrimitiveType.PrimitiveType;
import com.parser.nodes.Node_Literal.LiteralType;
import com.parser.nodes.Node_Expression.ExpressionType;

public class ScriptlangParser/*@bgen(jjtree)*/implements ScriptlangParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTScriptlangParserState jjtree = new JJTScriptlangParserState();

/*@egen*/
    /** Get the root node of the AST **/
    public Node rootNode() {
    	return jjtree.rootNode();
    }
}

PARSER_END(ScriptlangParser) /** ScriptLangParser Class - END **/

/**--------------------**/
/** Token declarations **/
/**--------------------**/
SKIP :
{
	" "
|	"\t"
|	"\n"
|	"\r"
}

TOKEN : /* IMPORTANT: !! DO NOT CHANGE THE TOKEN DECLARATION ORDER !! */
{
	/* Block unit tokens */
	<LBRACE: "{">
|	<RBRACE: "}">

	/* Primitive data types */
|	<U8:    "u8"   >
|	<U16:   "u16"  >
|	<U32:   "u32"  >
|	<U64:   "u64"  >
|	<I8:    "i8"   >
|	<I16:   "i16"  >
|	<I32:   "i32"  >
|	<I64:   "i64"  >
|	<F32:   "f32"  >
|	<F64:   "f64"  >
|	<BOOL:  "bool" >
|	<CHAR:  "char" >
|	<USIZE: "usize">
|	<ISIZE: "isize">
|	<AUTO:  "auto" >
|   <ARRAY: "array">
|   <LITERAL_SUFFIX: ("i" | "u" | "f" | "uz" | "iz") (<DIGIT_DEC>)+>

	/* Literals */
|	<LITERAL_INT_BIN: "0b" (<DIGIT_BIN>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_INT_OCT: "0" (<DIGIT_OCT>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_INT_DEC: (<DIGIT_DEC>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_INT_HEX: "0x" (<DIGIT_HEX>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_FLOAT32: (<DIGIT_DEC>)+ "." (<DIGIT_DEC>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_FLOAT64: (<DIGIT_DEC>)+ "." (<DIGIT_DEC>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_BOOL: ("true" | "false")>

	/* Keywords */
|	<FN:     "fn"    > /* Return type void for function declaration */
|	<CLASS:  "class" > /* Class declaration                         */
|	<STRUCT: "struct"> /* Struct declaration                        */
|	<ENUM:   "enum"  > /* Enum declaration                          */

	/* Identifiers */
|	<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT_BIN> | <DIGIT_OCT> | <DIGIT_DEC> | <DIGIT_HEX>)*>
|	<#LETTER: ["a"-"z", "A"-"Z"]>
|	<#DIGIT_BIN: ["0"-"1"]>
|	<#DIGIT_OCT: ["0"-"7"]>
|	<#DIGIT_DEC: ["0"-"9"]>
|	<#DIGIT_HEX: ["0"-"9", "a"-"z", "A"-"F"]>
}

/**-----------------**/
/** Root production **/
/**-----------------**/
void _Root() :
{/*@bgen(jjtree) _Root */
  AST_Root jjtn000 = new AST_Root(JJT_ROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Root */
        try {
/*@egen*/
	( _All() )* <EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _All()       : /* Matches any kind of top level construct               */
{}                  /* (blocks ({}), statements and any kind of declaration) */
{
	_BlockUnit() | _Statement() | _Declaration()
}

/**-------------------------**/
/** Higher level constructs **/
/**-------------------------**/
void _BlockUnit() : {/*@bgen(jjtree) _BlockUnit */
  AST_BlockUnit jjtn000 = new AST_BlockUnit(JJT_BLOCKUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _BlockUnit */
    try {
/*@egen*/
    <LBRACE> ( _All() )* <RBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void _Statement() :
{/*@bgen(jjtree) _Statement */
  AST_Statement jjtn000 = new AST_Statement(JJT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Statement */
        try {
/*@egen*/
	";"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration()       : /* Any kind of declaration goes here */
{}
{
	LOOKAHEAD(3) _Declaration_Variable() | /* Variables   */
	_Declaration_Function()              | /* Functions   */
	_Declaration_Class()                 | /* Classes     */
	_Declaration_Struct()                | /* Structures  */
	_Declaration_Enum()                    /* Enumerators */
}

/**----------------------------------**/
/** Lower level *generic* constructs **/
/**----------------------------------**/
void _Declaration_Variable() : {/*@bgen(jjtree) _Declaration_Variable */
  AST_Declaration_Variable jjtn000 = new AST_Declaration_Variable(JJT_DECLARATION_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Variable declaration: <type> <var_name> <assignment>? ; */
{/*@bgen(jjtree) _Declaration_Variable */
        try {
/*@egen*/
	_Type_Primitive() _Identifier() ( _Assignment() )? ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ 
}

void _Declaration_Function() : /* Function declaration: <type>|fn <func_name> (...) {...} */
{/*@bgen(jjtree) _Declaration_Function */
  AST_Declaration_Function jjtn000 = new AST_Declaration_Function(JJT_DECLARATION_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Declaration_Function */
        try {
/*@egen*/
	( _Type_Primitive() | <FN> ) <IDENTIFIER> "(" ")" _BlockUnit()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Class() :
{/*@bgen(jjtree) _Declaration_Class */
  AST_Declaration_Class jjtn000 = new AST_Declaration_Class(JJT_DECLARATION_CLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Declaration_Class */
        try {
/*@egen*/
	<CLASS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Struct() :
{/*@bgen(jjtree) _Declaration_Struct */
  AST_Declaration_Struct jjtn000 = new AST_Declaration_Struct(JJT_DECLARATION_STRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Declaration_Struct */
        try {
/*@egen*/
	<STRUCT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Enum() :
{/*@bgen(jjtree) _Declaration_Enum */
  AST_Declaration_Enum jjtn000 = new AST_Declaration_Enum(JJT_DECLARATION_ENUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Declaration_Enum */
        try {
/*@egen*/
	<ENUM>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Expression()       : {}
{
	LOOKAHEAD(3) _Expression_CondOr() |
	_Expression_Primary() _Assignment()
}

void _Assignment() : {/*@bgen(jjtree) _Assignment */
  AST_Assignment jjtn000 = new AST_Assignment(JJT_ASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Assignment: <prim_expr>? = <expr> */
{/*@bgen(jjtree) _Assignment */
        try {
/*@egen*/
	( _Expression_Primary() )? "=" _Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Identifier() : /* An identifier. (variable/function name for example) */
{/*@bgen(jjtree) _Identifier */
  AST_Identifier jjtn000 = new AST_Identifier(JJT_IDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; }
{/*@bgen(jjtree) _Identifier */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setIdentifier(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Literal() : /* Literal constants (signed/unsigned integer, float, boolean, char and string) */
{/*@bgen(jjtree) _Literal */
  AST_Literal jjtn000 = new AST_Literal(JJT_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; }
{/*@bgen(jjtree) _Literal */
        try {
/*@egen*/
	t = <LITERAL_INT_BIN>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ { jjtn000.setLiteral(t.image, LiteralType.INT_BIN); } | /* Binary integer      */
	t = <LITERAL_INT_OCT>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ { jjtn000.setLiteral(t.image, LiteralType.INT_OCT); } | /* Octal integer       */
	t = <LITERAL_INT_DEC>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ { jjtn000.setLiteral(t.image, LiteralType.INT_DEC); } | /* Decimal integer     */
	t = <LITERAL_INT_HEX>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ { jjtn000.setLiteral(t.image, LiteralType.INT_HEX); } | /* Hexadecimal integer */
	t = <LITERAL_FLOAT32>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ { jjtn000.setLiteral(t.image, LiteralType.FLOAT32); } | /* 32-bit float        */
	t = <LITERAL_FLOAT64>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ { jjtn000.setLiteral(t.image, LiteralType.FLOAT64); } | /* 64-bit float        */
	t = <LITERAL_BOOL>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
/*@egen*/    { jjtn000.setLiteral(t.image, LiteralType.BOOL);    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/   /* Boolean             */
}

/**--------------------------------------**/
/**--------------------------------------**/
/** Lower level *specialised* constructs **/
/**--------------------------------------**/
/**--------------------------------------**/

/**-------------**/
/** Expressions **/
/**-------------**/
void _Expression_CondOr()       : {}
{
	_Expression_CondAnd() ( "||"/*@bgen(jjtree) #_Expression(true) */
                                     {
                                       AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtn001.jjtSetFirstToken(getToken(1));
                                     }
                                     try {
/*@egen*/ _Expression_CondAnd()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                         jjtn001.jjtSetLastToken(getToken(0));
                                       }
                                     }
/*@egen*/                { jjtn001.setExpr("||", ExpressionType.CONDOR); } )*
}

void _Expression_CondAnd()       : {}
{
	_Expression_IncOr() ( "&&"/*@bgen(jjtree) #_Expression(true) */
                                   {
                                     AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                     jjtn001.jjtSetFirstToken(getToken(1));
                                   }
                                   try {
/*@egen*/ _Expression_IncOr()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte001;
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       throw (ParseException)jjte001;
                                     }
                                     throw (Error)jjte001;
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001, true);
                                       jjtn001.jjtSetLastToken(getToken(0));
                                     }
                                   }
/*@egen*/                { jjtn001.setExpr("&&", ExpressionType.CONDAND); } )*
}

void _Expression_IncOr()       : {}
{
	_Expression_ExOr() ( "|"/*@bgen(jjtree) #_Expression(true) */
                                 {
                                   AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtn001.jjtSetFirstToken(getToken(1));
                                 }
                                 try {
/*@egen*/ _Expression_ExOr()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, true);
                                     jjtn001.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/                { jjtn001.setExpr("|", ExpressionType.INCOR); } )*
}

void _Expression_ExOr()       : {}
{
	_Expression_And() ( "^"/*@bgen(jjtree) #_Expression(true) */
                                {
                                  AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/ _Expression_And()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/                { jjtn001.setExpr("^", ExpressionType.EXOR); } )*
}

void _Expression_And()       : {}
{
	_Expression_Equal() ( "&"/*@bgen(jjtree) #_Expression(true) */
                                  {
                                    AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtn001.jjtSetFirstToken(getToken(1));
                                  }
                                  try {
/*@egen*/ _Expression_Equal()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                      jjtn001.jjtSetLastToken(getToken(0));
                                    }
                                  }
/*@egen*/                { jjtn001.setExpr("&", ExpressionType.AND); } )*
}

void _Expression_Equal()       : {}
{
	_Expression_Relational()
	( "=="/*@bgen(jjtree) #_Expression(true) */
               {
                 AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtn001.jjtSetFirstToken(getToken(1));
               }
               try {
/*@egen*/ _Expression_Relational()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtn001.jjtSetLastToken(getToken(0));
                 }
               }
/*@egen*/                { jjtn001.setExpr("==", ExpressionType.EQUAL); } |
      "!="/*@bgen(jjtree) #_Expression(true) */
           {
             AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtn002.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/ _Expression_Relational()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
               jjtn002.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/                { jjtn002.setExpr("!=", ExpressionType.EQUAL); } )*
}

void _Expression_Relational()       : {}
{
	_Expression_Shift() 
	( "<"/*@bgen(jjtree) #_Expression(true) */
               {
                 AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtn001.jjtSetFirstToken(getToken(1));
               }
               try {
/*@egen*/  _Expression_Shift()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtn001.jjtSetLastToken(getToken(0));
                 }
               }
/*@egen*/                { jjtn001.setExpr("<",  ExpressionType.REL); } | 
	  ">"/*@bgen(jjtree) #_Expression(true) */
               {
                 AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
                 jjtn002.jjtSetFirstToken(getToken(1));
               }
               try {
/*@egen*/  _Expression_Shift()/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                   jjtn002.jjtSetLastToken(getToken(0));
                 }
               }
/*@egen*/                { jjtn002.setExpr(">",  ExpressionType.REL); } | 
	  "<="/*@bgen(jjtree) #_Expression(true) */
               {
                 AST_Expression jjtn003 = new AST_Expression(JJT_EXPRESSION);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
                 jjtn003.jjtSetFirstToken(getToken(1));
               }
               try {
/*@egen*/ _Expression_Shift()/*@bgen(jjtree)*/
               } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   throw (RuntimeException)jjte003;
                 }
                 if (jjte003 instanceof ParseException) {
                   throw (ParseException)jjte003;
                 }
                 throw (Error)jjte003;
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtn003.jjtSetLastToken(getToken(0));
                 }
               }
/*@egen*/                { jjtn003.setExpr("<=", ExpressionType.REL); } | 
	  ">="/*@bgen(jjtree) #_Expression(true) */
               {
                 AST_Expression jjtn004 = new AST_Expression(JJT_EXPRESSION);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
                 jjtn004.jjtSetFirstToken(getToken(1));
               }
               try {
/*@egen*/ _Expression_Shift()/*@bgen(jjtree)*/
               } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   throw (RuntimeException)jjte004;
                 }
                 if (jjte004 instanceof ParseException) {
                   throw (ParseException)jjte004;
                 }
                 throw (Error)jjte004;
               } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004, true);
                   jjtn004.jjtSetLastToken(getToken(0));
                 }
               }
/*@egen*/                { jjtn004.setExpr(">=", ExpressionType.REL); } )*
}

void _Expression_Shift()       : {}
{
	_Expression_Additive() 
	( "<<"/*@bgen(jjtree) #_Expression(true) */
                {
                  AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/  _Expression_Additive()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                { jjtn001.setExpr("<<",  ExpressionType.SHT); } | 
	  ">>"/*@bgen(jjtree) #_Expression(true) */
                {
                  AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/  _Expression_Additive()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                { jjtn002.setExpr(">>",  ExpressionType.SHT); } )*
}

void _Expression_Additive()       : {}
{
	_Expression_Multiplicative()
	( "+"/*@bgen(jjtree) #_Expression(true) */
              {
                AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ _Expression_Multiplicative()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtn001.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/                { jjtn001.setExpr("+",  ExpressionType.ADD); } |
      "-"/*@bgen(jjtree) #_Expression(true) */
          {
            AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ _Expression_Multiplicative()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/                { jjtn002.setExpr("-",  ExpressionType.ADD); } )*
}

void _Expression_Multiplicative()       : {}
{
	_Expression_Cast()
	( "*"/*@bgen(jjtree) #_Expression(true) */
              {
                AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ _Expression_Cast()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtn001.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/                { jjtn001.setExpr("*",  ExpressionType.MUL); } |
      "/"/*@bgen(jjtree) #_Expression(true) */
          {
            AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ _Expression_Cast()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/                { jjtn002.setExpr("/",  ExpressionType.MUL); } |
	  "%"/*@bgen(jjtree) #_Expression(true) */
              {
                AST_Expression jjtn003 = new AST_Expression(JJT_EXPRESSION);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ _Expression_Cast()/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                  jjtn003.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/                { jjtn003.setExpr("%",  ExpressionType.MUL); } )*
}

void _Expression_Cast()       :
{ Token t; }
{
	LOOKAHEAD(2) "(" t = _Type_Suffix() ")"/*@bgen(jjtree) #_Expression(true) */
                                                {
                                                  AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                  jjtn001.jjtSetFirstToken(getToken(1));
                                                }
                                                try {
/*@egen*/ _Expression_Unary()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte001) {
                                                  if (jjtc001) {
                                                    jjtree.clearNodeScope(jjtn001);
                                                    jjtc001 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte001 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte001;
                                                  }
                                                  if (jjte001 instanceof ParseException) {
                                                    throw (ParseException)jjte001;
                                                  }
                                                  throw (Error)jjte001;
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001, true);
                                                    jjtn001.jjtSetLastToken(getToken(0));
                                                  }
                                                }
/*@egen*/               
	{
		jjtn001.setExpr("(" + t.image + ")",  ExpressionType.CAST);
	}
|	_Expression_Unary()
}

void _Expression_Unary()       : {}
{
	"~"/*@bgen(jjtree) #_Expression(true) */
            {
              AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtn001.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ _Expression_Unary()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/                { jjtn001.setExpr("~",  ExpressionType.UNARY); } |
	"!"/*@bgen(jjtree) #_Expression(true) */
            {
              AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ _Expression_Unary()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/                { jjtn002.setExpr("!",  ExpressionType.UNARY); } |
	_Expression_Primary()
}

void _Expression_Primary()       : {} /* Primary Expression: <literal> | <identifier> | ( expression ) */
{
	_Literal() | _Identifier() | "(" _Expression() ")"
}

/**------------**/
/** Statements **/
/**------------**/
void _Statement_Labeled() : {/*@bgen(jjtree) _Statement_Labeled */
  AST_Statement_Labeled jjtn000 = new AST_Statement_Labeled(JJT_STATEMENT_LABELED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Statement_Labeled */
        try {
/*@egen*/
	_Identifier() ":" _Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**-------**/

/**-------**/
/** Types **/
/**-------**/
void _Type_Primitive() : /* All primitive data types are declared here */
{/*@bgen(jjtree) _Type_Primitive */
  AST_Type_Primitive jjtn000 = new AST_Type_Primitive(JJT_TYPE_PRIMITIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; }
{/*@bgen(jjtree) _Type_Primitive */
        try {
/*@egen*/
	t=<U8>    | t=<U16>   | t=<U32>  | t=<U64>  |
	t=<I8>    | t=<I16>   | t=<I32>  | t=<I64>  |
	t=<F32>   | t=<F64>   | t=<BOOL> | t=<CHAR> |
	t=<USIZE> | t=<ISIZE> | t=<AUTO> | t=<ARRAY>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setPrimitiveType(t.image, PrimitiveType.values()[t.kind - U8 + 1]);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

Token _Type_Suffix()       : /* Supported data type suffixes */
{ Token t; }
{
	( t=<U8>    | t=<U16>   | t=<U32>  | t=<U64>   |
	  t=<I8>    | t=<I16>   | t=<I32>  | t=<I64>   |
	  t=<F32>   | t=<F64>   | t=<BOOL> | t=<CHAR>  |
	  t=<USIZE> | t=<ISIZE> | t=<AUTO> | t=<ARRAY> |
	  t=<LITERAL_SUFFIX> )
	{
		return t;
	}
}