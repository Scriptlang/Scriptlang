/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ScriptlangParser.jj */
/*@egen*//**----------------**/
/** Parser options **/
/**----------------**/
options {
	LOOKAHEAD              = 1;
	CHOICE_AMBIGUITY_CHECK = 2;
	OTHER_AMBIGUITY_CHECK  = 1;
	STATIC                 = false;
	DEBUG_PARSER           = false;
	DEBUG_LOOKAHEAD        = false;
	DEBUG_TOKEN_MANAGER    = false;
	ERROR_REPORTING        = true;
	JAVA_UNICODE_ESCAPE    = false;
	UNICODE_INPUT          = false;
	IGNORE_CASE            = false;
	USER_TOKEN_MANAGER     = false;
	USER_CHAR_STREAM       = false;
	BUILD_PARSER           = true;
	BUILD_TOKEN_MANAGER    = true;
	SANITY_CHECK           = true;
	FORCE_LA_CHECK         = false;
	                              
	                                      
	                              
}

PARSER_BEGIN(ScriptlangParser) /** ScriptLangParser Class - BEGIN **/
package com.parser;

import com.utils.*;
import com.parser.nodes.Node_Type.*;
import com.parser.nodes.Node_Literal.LiteralType;
import com.parser.nodes.Node_Expression.ExpressionType;

public class ScriptlangParser/*@bgen(jjtree)*/implements ScriptlangParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTScriptlangParserState jjtree = new JJTScriptlangParserState();

/*@egen*/
    /** Get the root node of the AST **/
    public Node rootNode() {
    	return jjtree.rootNode();
    }
}

PARSER_END(ScriptlangParser) /** ScriptLangParser Class - END **/

/**--------------------**/
/** Token declarations **/
/**--------------------**/
SKIP :
{
	" " | "\t" | "\n" | "\r"
}

/**----------**/
/** COMMENTS **/
/**----------**/
MORE :
{
	"//" : IN_SINGLE_LINE_COMMENT
|	< "/**" ~[ "/" ] > { input_stream.backup(1); } : IN_FORMAL_COMMENT
|	"/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT: ( ~[ "\n", "\r" ] )* ( "\n" | "\r" | "\r\n" )? > : DEFAULT
}

<IN_FORMAL_COMMENT> SPECIAL_TOKEN :
{
	<FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{
	<MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT> MORE :
{
	< ~[] >
}

TOKEN : /**** IMPORTANT: !! DO NOT CHANGE THE TOKEN DECLARATION ORDER !! ****/
{
	/* Block unit tokens */
	<LBRACE: "{">
|	<RBRACE: "}">

	/* Primitive data types */
|	<U8:     "u8"    >
|	<U16:    "u16"   >
|	<U32:    "u32"   >
|	<U64:    "u64"   >
|	<I8:     "i8"    >
|	<I16:    "i16"   >
|	<I32:    "i32"   >
|	<I64:    "i64"   >
|	<F32:    "f32"   >
|	<F64:    "f64"   >
|	<BOOL:   "bool"  >
|	<CHAR:   "char"  >
|	<STRING: "string">
|	<USIZE:  "usize" >
|	<ISIZE:  "isize" >
|   <ARRAY:  "array" >
|	<AUTO:   "auto"  >
|   <TYPE:   "type"  >
|   <MOD:    "module">
|   <LITERAL_SUFFIX: ("i" | "u" | "f" | "uz" | "iz") (<DIGIT_DEC>)*>

	/* Literals */
|	<LITERAL_INT_BIN: "0b" (<DIGIT_BIN>)+>
|	<LITERAL_INT_OCT: "0" (<DIGIT_OCT>)+>
|	<LITERAL_INT_DEC: (<DIGIT_DEC>)+>
|	<LITERAL_INT_HEX: "0x" (<DIGIT_HEX>)+>
|	<LITERAL_FLOAT32: (<DIGIT_DEC>)+ "." (<DIGIT_DEC>)+>
|	<LITERAL_FLOAT64: (<DIGIT_DEC>)+ "." (<DIGIT_DEC>)+>
|	<LITERAL_BOOL:    ("true" | "false")>

	/* Keywords */
|	<FN:       "fn"      > /* Return type void for function declaration                     */
|	<CLASS:    "class"   > /* Class declaration                                             */
|	<STRUCT:   "struct"  > /* Struct declaration                                            */
|	<ENUM:     "enum"    > /* Enum declaration                                              */
|	<PUB:      "pub"     > /* Public modifier                                               */
|	<PRIV:     "priv"    > /* Private modifier                                              */
|	<PROT:     "prot"    > /* Protected modifier                                            */
|	<IF:       "if"      > /* Start of an if statement                                      */
|	<ELSE:     "else"    > /* Start of an else branch of an if statement                    */
|	<SWITCH:   "switch"  > /* Start of a switch statement                                   */
|	<FOR:      "for"     > /* Start of a for loop statement                                 */
|	<WHILE:    "while"   > /* Start of a while loop statement                               */
|   <BREAK:    "break"   > /* Break out of a loop                                           */
|   <CONTINUE: "continue"> /* Jump to the next loop cycle                                   */
|   <RETURN:   "return"  > /* Return from a block unit                                      */
|	<BIND:     "@"       > /* Binds an identifier to a pattern (could be an anonymous bind) */
|	<NEW:      "new"     > /* Instantiate an object on the heap / fork a new thread         */

	/* Identifiers */
|	<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT_BIN> | <DIGIT_OCT> | <DIGIT_DEC> | <DIGIT_HEX>)*>
|	<CHARACTER_LITERAL:
		"'"
		( (~["'","\\","\n","\r"]) |
			("\\"
				( ["n","t","b","r","f","\\","'","\""] |
				  ["0"-"7"] ( ["0"-"7"] )? |
				  ["0"-"3"] ["0"-"7"] ["0"-"7"]
				)
			)
		)
		"'">
|	<STRING_LITERAL:
		"\""
		( (~["\"","\\","\n","\r"]) |
			("\\"
				( ["n","t","b","r","f","\\","'","\""] |
				  ["0"-"7"] ( ["0"-"7"] )? |
				  ["0"-"3"] ["0"-"7"] ["0"-"7"]
				)
			)
		)*
		"\"">
|	<#LETTER:    ["a"-"z", "A"-"Z", "_"]>
|	<#DIGIT_BIN: ["0"-"1"]>
|	<#DIGIT_OCT: ["0"-"7"]>
|	<#DIGIT_DEC: ["0"-"9"]>
|	<#DIGIT_HEX: ["0"-"9", "a"-"z", "A"-"F"]>
}

/**-----------------**/
/** Root production **/
/**-----------------**/
void _Root() : {/*@bgen(jjtree) _Root */
  AST_Root jjtn000 = new AST_Root(JJT_ROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Root */
        try {
/*@egen*/
	( _All() )* <EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _All()       : {} /* Matches any kind of top level construct */
{
	/* A label (optional) with an (optional) access modifier for the actual top level module */
	LOOKAHEAD(3)/*@bgen(jjtree) #_Label(true) */
                     {
                       AST_Label jjtn001 = new AST_Label(JJT_LABEL);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ ( ( _Type_Access_Modifier(jjtn001) )? ( _Identifier() )? )/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/           ":"
	
	/* A block unit -> {...} */
|	LOOKAHEAD(5) _BlockUnit()

	/* Declarations -> lambdas, functions, variables/objects, classes, structs, enums */
|	LOOKAHEAD(3) _Declaration()

	/* Statements -> if, switch, for, while */
|	LOOKAHEAD(2) _Statement()                           
}

/**-------------------------**/
/** Higher level constructs **/
/**-------------------------**/
void _BlockUnit()       : {} /* Also known as an independent Compilation Unit / Module */
{
	/* A threaded block unit */
	LOOKAHEAD(3)/*@bgen(jjtree) #_BlockUnit_Thread(true) */
                     {
                       AST_BlockUnit_Thread jjtn002 = new AST_BlockUnit_Thread(JJT_BLOCKUNIT_THREAD);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                       jjtn002.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ ( (/*@bgen(jjtree) #_Type(true) */
                         {
                           AST_Type jjtn001 = new AST_Type(JJT_TYPE);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/ _Type_Access_Modifier(jjtn001)/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/          )? <NEW> ( _Identifier() )? ( _Declaration_Array() )? <LBRACE> ( _All() )* <RBRACE> )/*@bgen(jjtree)*/
                     } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         throw (RuntimeException)jjte002;
                       }
                       if (jjte002 instanceof ParseException) {
                         throw (ParseException)jjte002;
                       }
                       throw (Error)jjte002;
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtn002.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/                     
	
	/* A normal block unit */
|/*@bgen(jjtree) #_BlockUnit(true) */
        {
          AST_BlockUnit jjtn004 = new AST_BlockUnit(JJT_BLOCKUNIT);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
          jjtn004.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/	( ( (/*@bgen(jjtree) #_Type(true) */
              {
                AST_Type jjtn003 = new AST_Type(JJT_TYPE);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ _Type_Access_Modifier(jjtn003)/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                  jjtn003.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/          )? _Identifier() )? ( _Declaration_Array() )? <LBRACE> ( _All() )* <RBRACE> )/*@bgen(jjtree)*/
        } catch (Throwable jjte004) {
          if (jjtc004) {
            jjtree.clearNodeScope(jjtn004);
            jjtc004 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte004 instanceof RuntimeException) {
            throw (RuntimeException)jjte004;
          }
          if (jjte004 instanceof ParseException) {
            throw (ParseException)jjte004;
          }
          throw (Error)jjte004;
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
            jjtn004.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/              				
}

void _Statement()       : {} /* Any kind of statement goes here */
{/*@bgen(jjtree) #_Statement_Empty(true) */
        {
          AST_Statement_Empty jjtn001 = new AST_Statement_Empty(JJT_STATEMENT_EMPTY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	";"/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                                  /* Just a semicolon                           */
|	LOOKAHEAD(3) _Statement_Switch()     /* Switch statement                           */
|	LOOKAHEAD(3) _Statement_If()         /* If statement                               */
|	LOOKAHEAD(3) _Statement_For()        /* For statement                              */
|	LOOKAHEAD(3) _Statement_While()      /* While statement                            */
|	LOOKAHEAD(3) _Statement_Flow() ";"   /* A statement that disturbs the program flow */
|	LOOKAHEAD(2) _Statement_Expression() /* Assignment statement                       */		
}

void _Declaration()       : {} /* Any kind of declaration goes here */
{
	LOOKAHEAD(5000) _Declaration_Function_Lambda() /* Lambda functions (aka function pointers) */
|	LOOKAHEAD(10)   _Declaration_Function()        /* Functions                                */
|	LOOKAHEAD(2)    _Declaration_Object()          /* Variables                                */
|	LOOKAHEAD(2)    _Declaration_Class()  ";"      /* Classes                                  */
|	LOOKAHEAD(2)    _Declaration_Struct() ";"      /* Structures                               */
|	_Declaration_Enum()                   ";"      /* Enumerators                              */
}

/**----------------------------------**/
/** Lower level *generic* constructs **/
/**----------------------------------**/
void _Declaration_Object() : {/*@bgen(jjtree) _Declaration_Object */
  AST_Declaration_Object jjtn000 = new AST_Declaration_Object(JJT_DECLARATION_OBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Variable object declaration: <type> <objname> <postfix> <assignment>? */
{/*@bgen(jjtree) _Declaration_Object */
        try {
/*@egen*/
	_Type()/*@bgen(jjtree) #_Declaration_Object_List(true) */
        {
          AST_Declaration_Object_List jjtn003 = new AST_Declaration_Object_List(JJT_DECLARATION_OBJECT_LIST);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtn003.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	(/*@bgen(jjtree) #_Declaration_Object_Single(true) */
                {
                  AST_Declaration_Object_Single jjtn002 = new AST_Declaration_Object_Single(JJT_DECLARATION_OBJECT_SINGLE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/
		(
			_Identifier()
			( LOOKAHEAD(2)/*@bgen(jjtree) #_Type(true) */
                                       {
                                         AST_Type jjtn001 = new AST_Type(JJT_TYPE);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                         jjtn001.jjtSetFirstToken(getToken(1));
                                       }
                                       try {
/*@egen*/ _Declaration_Object_Type_Postfix(jjtn001)/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, true);
                                           jjtn001.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/          )*
			( LOOKAHEAD(2) _Assignment_Noprimexpr() )?
			/* Consume assignment token in order to disallow multiple inline assignments */
			( LOOKAHEAD(2) _Assignment_Operation() )?
		)/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                              
		
		( LOOKAHEAD(2) _Declaration_Object_List() )?
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            throw (RuntimeException)jjte003;
          }
          if (jjte003 instanceof ParseException) {
            throw (ParseException)jjte003;
          }
          throw (Error)jjte003;
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtn003.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                            /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Object_Type_Postfix(SimpleNode n)       : {} /* Object type postfix declaration: <array>|<slice> */
{
	LOOKAHEAD(3) _Declaration_Array()
	{
		n.setType(null, TypeModifier.ARRAYUNIQUE, null);
	}
|	_Declaration_Array_Slice()
	{
		n.setType(null, TypeModifier.ARRAYSLICE, null);
	}
}

void _Declaration_Object_List()       : {} /* Variable / Object declaration list: ( ( , <assignment>)+ )? (;|<assignment>) */
{
	( ( LOOKAHEAD(2) ","/*@bgen(jjtree) #_Declaration_Object_Single(true) */
                             {
                               AST_Declaration_Object_Single jjtn002 = new AST_Declaration_Object_Single(JJT_DECLARATION_OBJECT_SINGLE);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtn002.jjtSetFirstToken(getToken(1));
                             }
                             try {
/*@egen*/ ( _Identifier() (/*@bgen(jjtree) #_Type(true) */
                                               {
                                                 AST_Type jjtn001 = new AST_Type(JJT_TYPE);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
                                               }
                                               try {
/*@egen*/ _Type_Modifier(jjtn001)/*@bgen(jjtree)*/
                                               } catch (Throwable jjte001) {
                                                 if (jjtc001) {
                                                   jjtree.clearNodeScope(jjtn001);
                                                   jjtc001 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte001 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte001;
                                                 }
                                                 if (jjte001 instanceof ParseException) {
                                                   throw (ParseException)jjte001;
                                                 }
                                                 throw (Error)jjte001;
                                               } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/          )* ( LOOKAHEAD(2) _Assignment_Noprimexpr() )? )/*@bgen(jjtree)*/
                             } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte002;
                               }
                               if (jjte002 instanceof ParseException) {
                                 throw (ParseException)jjte002;
                               }
                               throw (Error)jjte002;
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                                 jjtn002.jjtSetLastToken(getToken(0));
                               }
                             }
/*@egen*/                               )+ )?
	( ";" | (/*@bgen(jjtree) #_Declaration_Object_Single(true) */
                  {
                    AST_Declaration_Object_Single jjtn003 = new AST_Declaration_Object_Single(JJT_DECLARATION_OBJECT_SINGLE);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/ _Assignment_Noprimexpr()/*@bgen(jjtree)*/
                  } catch (Throwable jjte003) {
                    if (jjtc003) {
                      jjtree.clearNodeScope(jjtn003);
                      jjtc003 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte003 instanceof RuntimeException) {
                      throw (RuntimeException)jjte003;
                    }
                    if (jjte003 instanceof ParseException) {
                      throw (ParseException)jjte003;
                    }
                    throw (Error)jjte003;
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtn003.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                               ) )
}

void _Declaration_Function() : {/*@bgen(jjtree) _Declaration_Function */
  AST_Declaration_Function jjtn000 = new AST_Declaration_Function(JJT_DECLARATION_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Function declaration: (<type>|fn)? <IDENTIFIER> (<params>?) <blockunit> */
{/*@bgen(jjtree) _Declaration_Function */
        try {
/*@egen*/
	( LOOKAHEAD(2) _Type() )? _Identifier() "(" ( _Declaration_Parameter_List() )? ")" _BlockUnit()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Function_Lambda() : {/*@bgen(jjtree) _Declaration_Function_Lambda */
  AST_Declaration_Function_Lambda jjtn000 = new AST_Declaration_Function_Lambda(JJT_DECLARATION_FUNCTION_LAMBDA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Function declaration: <type> <IDENTIFIER>? (<params>)? (<assignment>)? */
{/*@bgen(jjtree) _Declaration_Function_Lambda */
        try {
/*@egen*/
	_Type()/*@bgen(jjtree) #_Declaration_Object_List(true) */
        {
          AST_Declaration_Object_List jjtn002 = new AST_Declaration_Object_List(JJT_DECLARATION_OBJECT_LIST);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	(/*@bgen(jjtree) #_Declaration_Object_Single(true) */
                {
                  AST_Declaration_Object_Single jjtn001 = new AST_Declaration_Object_Single(JJT_DECLARATION_OBJECT_SINGLE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/
		(
			_Identifier() "(" ( _Declaration_Parameter_List() )? ")"
			( LOOKAHEAD(2) _Assignment_Noprimexpr() )?
		)/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                              
		_Declaration_Object_List()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                            /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Function_Lambda_Enum() : {/*@bgen(jjtree) _Declaration_Function_Lambda_Enum */
  AST_Declaration_Function_Lambda_Enum jjtn000 = new AST_Declaration_Function_Lambda_Enum(JJT_DECLARATION_FUNCTION_LAMBDA_ENUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Lambda functions (aka function pointers): <type>? */
{/*@bgen(jjtree) _Declaration_Function_Lambda_Enum */
        try {
/*@egen*/
	( LOOKAHEAD(2) _Type() )?
	( _Identifier() )? "(" ( _Declaration_Parameter_List() )? ")"
	( LOOKAHEAD(2) _Assignment_Noprimexpr() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Struct() : {/*@bgen(jjtree) _Declaration_Struct */
  AST_Declaration_Struct jjtn000 = new AST_Declaration_Struct(JJT_DECLARATION_STRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Struct declaration: struct <IDENTIFIER> { <declaration>* } ; */
{/*@bgen(jjtree) _Declaration_Struct */
        try {
/*@egen*/
	(/*@bgen(jjtree) #_Type(true) */
          {
            AST_Type jjtn001 = new AST_Type(JJT_TYPE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ _Type_Access_Modifier(jjtn001)/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/          )?
	<STRUCT> _Identifier() "{" ( _Declaration() )* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Class() : {/*@bgen(jjtree) _Declaration_Class */
  AST_Declaration_Class jjtn000 = new AST_Declaration_Class(JJT_DECLARATION_CLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Class declaration: class <IDENTIFIER> ( : (<modif>? <IDENTIFIER> , ...)+ )? <blockunit> */
{/*@bgen(jjtree) _Declaration_Class */
        try {
/*@egen*/
	(/*@bgen(jjtree) #_Type(true) */
          {
            AST_Type jjtn001 = new AST_Type(JJT_TYPE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ _Type_Access_Modifier(jjtn001)/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/          )?
	<CLASS> _Identifier()
		( ":"/*@bgen(jjtree) #_Declaration_Class_Inheritance(true) */
                        {
                          AST_Declaration_Class_Inheritance jjtn003 = new AST_Declaration_Class_Inheritance(JJT_DECLARATION_CLASS_INHERITANCE);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                          jjtn003.jjtSetFirstToken(getToken(1));
                        }
                        try {
/*@egen*/
			( LOOKAHEAD(2)
				(/*@bgen(jjtree) #_Type(true) */
                                  {
                                    AST_Type jjtn002 = new AST_Type(JJT_TYPE);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
                                    jjtn002.jjtSetFirstToken(getToken(1));
                                  }
                                  try {
/*@egen*/ _Type_Access_Modifier(jjtn002)/*@bgen(jjtree)*/
                                  } catch (Throwable jjte002) {
                                    if (jjtc002) {
                                      jjtree.clearNodeScope(jjtn002);
                                      jjtc002 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte002 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte002;
                                    }
                                    if (jjte002 instanceof ParseException) {
                                      throw (ParseException)jjte002;
                                    }
                                    throw (Error)jjte002;
                                  } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002, true);
                                      jjtn002.jjtSetLastToken(getToken(0));
                                    }
                                  }
/*@egen*/          )?
				_Identifier() ( "," )?
			)+/*@bgen(jjtree)*/
                        } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            throw (RuntimeException)jjte003;
                          }
                          if (jjte003 instanceof ParseException) {
                            throw (ParseException)jjte003;
                          }
                          throw (Error)jjte003;
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtn003.jjtSetLastToken(getToken(0));
                          }
                        }
/*@egen*/                                  
		)?	
	_BlockUnit()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Enum() : {/*@bgen(jjtree) _Declaration_Enum */
  AST_Declaration_Enum jjtn000 = new AST_Declaration_Enum(JJT_DECLARATION_ENUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Enum declaration: enum <IDENTIFIER>? { <enumbodylist>? } */
{/*@bgen(jjtree) _Declaration_Enum */
        try {
/*@egen*/
	(/*@bgen(jjtree) #_Type(true) */
          {
            AST_Type jjtn001 = new AST_Type(JJT_TYPE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ _Type_Access_Modifier(jjtn001)/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/          )?
	<ENUM> ( _Identifier() )? "{" ( _Declaration_EnumBody_List() )? "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_EnumBody_List()       : {} /* Enum body list declaration */
{
	( _Declaration_EnumBody() ( "," )? )+
}

void _Declaration_EnumBody()       : {} /* Enum body declaration: <tuple> | <struct> | <enumconstlist> | <function> */
{
	/* An enum can have ... */
	LOOKAHEAD(3) _Declaration_Tuple_Named()     /* A named tuple (or anonymous) with types and expression */
|	LOOKAHEAD(3) _Declaration_EnumBody_Struct() /* A struct declaration inside an enum                    */
|	_Declaration_EnumBody_Struct_Bodyless()     /* A struct without a body inside an enum                 */
|	LOOKAHEAD(3) _Declaration_EnumBody_Const()  /* A constant identifier                                  */
|	_Declaration_Function_Lambda_Enum()         /* A function, which acts as a lambda                     */
}

void _Declaration_EnumBody_Const() : {/*@bgen(jjtree) _Declaration_EnumBody_Const */
  AST_Declaration_EnumBody_Const jjtn000 = new AST_Declaration_EnumBody_Const(JJT_DECLARATION_ENUMBODY_CONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Enum body const declaration: <IDENTIFIER> <assignment>? */
{/*@bgen(jjtree) _Declaration_EnumBody_Const */
        try {
/*@egen*/
	_Identifier() ( LOOKAHEAD(2) _Assignment() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_EnumBody_Struct() : {/*@bgen(jjtree) _Declaration_EnumBody_Struct */
  AST_Declaration_EnumBody_Struct jjtn000 = new AST_Declaration_EnumBody_Struct(JJT_DECLARATION_ENUMBODY_STRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Enum body struct declaration: <struct>? <IDENTIFIER> { <declaration>* } */
{/*@bgen(jjtree) _Declaration_EnumBody_Struct */
        try {
/*@egen*/
	( <STRUCT> )? _Identifier() "{" ( _Declaration() )* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_EnumBody_Struct_Bodyless() : {/*@bgen(jjtree) _Declaration_EnumBody_Struct_Bodyless */
  AST_Declaration_EnumBody_Struct_Bodyless jjtn000 = new AST_Declaration_EnumBody_Struct_Bodyless(JJT_DECLARATION_ENUMBODY_STRUCT_BODYLESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Enum body struct declaration: <struct> <IDENTIFIER> */
{/*@bgen(jjtree) _Declaration_EnumBody_Struct_Bodyless */
        try {
/*@egen*/
	<STRUCT> _Identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Tuple_Named() : {/*@bgen(jjtree) _Declaration_Tuple_Named */
  AST_Declaration_Tuple_Named jjtn000 = new AST_Declaration_Tuple_Named(JJT_DECLARATION_TUPLE_NAMED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Enum body tuple declaration: <IDENTIFIER>? ( ((<expression>|<type>),?)+ ) */
{/*@bgen(jjtree) _Declaration_Tuple_Named */
        try {
/*@egen*/
	( _Identifier() )? "(" (/*@bgen(jjtree) #_Declaration_Tuple_Named_Arg(true) */
                                 {
                                   AST_Declaration_Tuple_Named_Arg jjtn001 = new AST_Declaration_Tuple_Named_Arg(JJT_DECLARATION_TUPLE_NAMED_ARG);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtn001.jjtSetFirstToken(getToken(1));
                                 }
                                 try {
/*@egen*/ ( LOOKAHEAD(3) _Expression() | _Type() )/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, true);
                                     jjtn001.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/                                 ( "," )? )+ ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Bind() : {/*@bgen(jjtree) _Declaration_Bind */
  AST_Declaration_Bind jjtn000 = new AST_Declaration_Bind(JJT_DECLARATION_BIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Bind declaration: <IDENTIFIER>? @ | [<IDENTIFIER>,? <IDENTIFIER>,? ...] @ */
{/*@bgen(jjtree) _Declaration_Bind */
        try {
/*@egen*/
	( _Identifier() )? <BIND>
|	"[" ( ( LOOKAHEAD(2) _Identifier() | _Declaration_Bind() ) ( "," )? )+ "]" <BIND>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Parameter_List() : {/*@bgen(jjtree) _Declaration_Parameter_List */
  AST_Declaration_Parameter_List jjtn000 = new AST_Declaration_Parameter_List(JJT_DECLARATION_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Parameter list declaration: <type> <IDENTIFIER>, <type> <IDENTIFIER>, <type>, <type>, ... */
{/*@bgen(jjtree) _Declaration_Parameter_List */
        try {
/*@egen*/
	( _Declaration_Parameter_Single() ( "," )? )+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Parameter_Single() : {/*@bgen(jjtree) _Declaration_Parameter_Single */
  AST_Declaration_Parameter_Single jjtn000 = new AST_Declaration_Parameter_Single(JJT_DECLARATION_PARAMETER_SINGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Declaration of a single function argument: <type> <IDENTIFIER> */
{/*@bgen(jjtree) _Declaration_Parameter_Single */
        try {
/*@egen*/
	_Type() ( LOOKAHEAD(2) _Identifier() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Parameter_Caller_List() : {/*@bgen(jjtree) _Declaration_Parameter_Caller_List */
  AST_Declaration_Parameter_Caller_List jjtn000 = new AST_Declaration_Parameter_Caller_List(JJT_DECLARATION_PARAMETER_CALLER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Parameter list declaration: ( <expression>,? )* */
{/*@bgen(jjtree) _Declaration_Parameter_Caller_List */
        try {
/*@egen*/
	(/*@bgen(jjtree) #_Declaration_Parameter_Caller_Single(true) */
          {
            AST_Declaration_Parameter_Caller_Single jjtn001 = new AST_Declaration_Parameter_Caller_Single(JJT_DECLARATION_PARAMETER_CALLER_SINGLE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/                                         ( "," )? )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Declaration_Array()       : {} /* Declaration array: [ ( <expression> ( "," <expression>? )* )* ] */
{
	"[" (/*@bgen(jjtree) #_Declaration_Array(true) */
              {
                AST_Declaration_Array jjtn005 = new AST_Declaration_Array(JJT_DECLARATION_ARRAY);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
                jjtn005.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ ( LOOKAHEAD(2)/*@bgen(jjtree) #_Declaration_Array_Arg(true) */
                             {
                               AST_Declaration_Array_Arg jjtn002 = new AST_Declaration_Array_Arg(JJT_DECLARATION_ARRAY_ARG);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtn002.jjtSetFirstToken(getToken(1));
                             }
                             try {
/*@egen*/ (/*@bgen(jjtree) #_Expression(true) */
                               {
                                 AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtn001.jjtSetFirstToken(getToken(1));
                               }
                               try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                   jjtn001.jjtSetLastToken(getToken(0));
                                 }
                               }
/*@egen*/                )/*@bgen(jjtree)*/
                             } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte002;
                               }
                               if (jjte002 instanceof ParseException) {
                                 throw (ParseException)jjte002;
                               }
                               throw (Error)jjte002;
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                                 jjtn002.jjtSetLastToken(getToken(0));
                               }
                             }
/*@egen*/                           ( ","/*@bgen(jjtree) #_Declaration_Array_Arg(true) */
                                                                                              {
                                                                                                AST_Declaration_Array_Arg jjtn004 = new AST_Declaration_Array_Arg(JJT_DECLARATION_ARRAY_ARG);
                                                                                                boolean jjtc004 = true;
                                                                                                jjtree.openNodeScope(jjtn004);
                                                                                                jjtn004.jjtSetFirstToken(getToken(1));
                                                                                              }
                                                                                              try {
/*@egen*/ ( LOOKAHEAD(2)/*@bgen(jjtree) #_Expression(true) */
                                                                                                             {
                                                                                                               AST_Expression jjtn003 = new AST_Expression(JJT_EXPRESSION);
                                                                                                               boolean jjtc003 = true;
                                                                                                               jjtree.openNodeScope(jjtn003);
                                                                                                               jjtn003.jjtSetFirstToken(getToken(1));
                                                                                                             }
                                                                                                             try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                                                                                                             } catch (Throwable jjte003) {
                                                                                                               if (jjtc003) {
                                                                                                                 jjtree.clearNodeScope(jjtn003);
                                                                                                                 jjtc003 = false;
                                                                                                               } else {
                                                                                                                 jjtree.popNode();
                                                                                                               }
                                                                                                               if (jjte003 instanceof RuntimeException) {
                                                                                                                 throw (RuntimeException)jjte003;
                                                                                                               }
                                                                                                               if (jjte003 instanceof ParseException) {
                                                                                                                 throw (ParseException)jjte003;
                                                                                                               }
                                                                                                               throw (Error)jjte003;
                                                                                                             } finally {
                                                                                                               if (jjtc003) {
                                                                                                                 jjtree.closeNodeScope(jjtn003, true);
                                                                                                                 jjtn003.jjtSetLastToken(getToken(0));
                                                                                                               }
                                                                                                             }
/*@egen*/                )?/*@bgen(jjtree)*/
                                                                                              } catch (Throwable jjte004) {
                                                                                                if (jjtc004) {
                                                                                                  jjtree.clearNodeScope(jjtn004);
                                                                                                  jjtc004 = false;
                                                                                                } else {
                                                                                                  jjtree.popNode();
                                                                                                }
                                                                                                if (jjte004 instanceof RuntimeException) {
                                                                                                  throw (RuntimeException)jjte004;
                                                                                                }
                                                                                                if (jjte004 instanceof ParseException) {
                                                                                                  throw (ParseException)jjte004;
                                                                                                }
                                                                                                throw (Error)jjte004;
                                                                                              } finally {
                                                                                                if (jjtc004) {
                                                                                                  jjtree.closeNodeScope(jjtn004, true);
                                                                                                  jjtn004.jjtSetLastToken(getToken(0));
                                                                                                }
                                                                                              }
/*@egen*/                           )* )+/*@bgen(jjtree)*/
              } catch (Throwable jjte005) {
                if (jjtc005) {
                  jjtree.clearNodeScope(jjtn005);
                  jjtc005 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte005 instanceof RuntimeException) {
                  throw (RuntimeException)jjte005;
                }
                if (jjte005 instanceof ParseException) {
                  throw (ParseException)jjte005;
                }
                throw (Error)jjte005;
              } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005, true);
                  jjtn005.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/                       )? "]"
}

void _Declaration_Array_Slice() : {/*@bgen(jjtree) _Declaration_Array_Slice */
  AST_Declaration_Array_Slice jjtn000 = new AST_Declaration_Array_Slice(JJT_DECLARATION_ARRAY_SLICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Declaration array with slice notation: [ <expression>? (: <expression>? ( : <expression>? )? )? ] */
{/*@bgen(jjtree) _Declaration_Array_Slice */
        try {
/*@egen*/
	"["/*@bgen(jjtree) #_Declaration_Array_Slice_Start(true) */
                {
                  AST_Declaration_Array_Slice_Start jjtn001 = new AST_Declaration_Array_Slice_Start(JJT_DECLARATION_ARRAY_SLICE_START);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/
		( _Expression() )?/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                                   
		(
				":"/*@bgen(jjtree) #_Declaration_Array_Slice_End(true) */
                                    {
                                      AST_Declaration_Array_Slice_End jjtn002 = new AST_Declaration_Array_Slice_End(JJT_DECLARATION_ARRAY_SLICE_END);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                      jjtn002.jjtSetFirstToken(getToken(1));
                                    }
                                    try {
/*@egen*/ ( _Expression() )?/*@bgen(jjtree)*/
                                    } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte002;
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        throw (ParseException)jjte002;
                                      }
                                      throw (Error)jjte002;
                                    } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002, true);
                                        jjtn002.jjtSetLastToken(getToken(0));
                                      }
                                    }
/*@egen*/                                
			(
				":"/*@bgen(jjtree) #_Declaration_Array_Slice_Skip(true) */
                                    {
                                      AST_Declaration_Array_Slice_Skip jjtn003 = new AST_Declaration_Array_Slice_Skip(JJT_DECLARATION_ARRAY_SLICE_SKIP);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
                                      jjtn003.jjtSetFirstToken(getToken(1));
                                    }
                                    try {
/*@egen*/ ( _Expression() )?/*@bgen(jjtree)*/
                                    } catch (Throwable jjte003) {
                                      if (jjtc003) {
                                        jjtree.clearNodeScope(jjtn003);
                                        jjtc003 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte003 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte003;
                                      }
                                      if (jjte003 instanceof ParseException) {
                                        throw (ParseException)jjte003;
                                      }
                                      throw (Error)jjte003;
                                    } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003, true);
                                        jjtn003.jjtSetLastToken(getToken(0));
                                      }
                                    }
/*@egen*/                                 
			)?
		)? 
	"]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Expression()       : {} /* Expression: <blockunit> | <cascaded_expression> | <prim_expr> <assignment> */
{
	LOOKAHEAD(5000) _BlockUnit()
|	LOOKAHEAD(3) _Expression_CondOr()
|	_Expression_Primary() _Assignment()
}

void _Assignment() : {/*@bgen(jjtree) _Assignment */
  AST_Assignment jjtn000 = new AST_Assignment(JJT_ASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Assignment: <prim_expr>? <assign_operation> <expr> */
{/*@bgen(jjtree) _Assignment */
        try {
/*@egen*/
	( LOOKAHEAD(2) _Expression_Primary() )? _Assignment_Operation()/*@bgen(jjtree) #_Expression(true) */
                                                                        {
                                                                          AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                                          boolean jjtc001 = true;
                                                                          jjtree.openNodeScope(jjtn001);
                                                                          jjtn001.jjtSetFirstToken(getToken(1));
                                                                        }
                                                                        try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                                                                        } catch (Throwable jjte001) {
                                                                          if (jjtc001) {
                                                                            jjtree.clearNodeScope(jjtn001);
                                                                            jjtc001 = false;
                                                                          } else {
                                                                            jjtree.popNode();
                                                                          }
                                                                          if (jjte001 instanceof RuntimeException) {
                                                                            throw (RuntimeException)jjte001;
                                                                          }
                                                                          if (jjte001 instanceof ParseException) {
                                                                            throw (ParseException)jjte001;
                                                                          }
                                                                          throw (Error)jjte001;
                                                                        } finally {
                                                                          if (jjtc001) {
                                                                            jjtree.closeNodeScope(jjtn001, true);
                                                                            jjtn001.jjtSetLastToken(getToken(0));
                                                                          }
                                                                        }
/*@egen*/               /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Assignment_Noprimexpr()                : {/*@bgen(jjtree) #_Assignment(true) */
  AST_Assignment jjtn000 = new AST_Assignment(JJT_ASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Assignment: <assign_operation> <expr> */
{/*@bgen(jjtree) #_Assignment(true) */
        try {
/*@egen*/
	_Assignment_Operation()/*@bgen(jjtree) #_Expression(true) */
                                {
                                  AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/               /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Assignment_Operation() : /* Assignment operation. It's self explanatory. */
{/*@bgen(jjtree) _Assignment_Operation */
  AST_Assignment_Operation jjtn000 = new AST_Assignment_Operation(JJT_ASSIGNMENT_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; }
{/*@bgen(jjtree) _Assignment_Operation */
        try {
/*@egen*/
	( t="=" | t="*=" | t="/=" | t="+=" | t="-=" | t=">>=" | t="<<=" | t="&=" | t="|=" | t="^=" | t="%=" )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setIdentifier(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Identifier() : /* An identifier. (variable/function name for example) */
{/*@bgen(jjtree) _Identifier */
  AST_Identifier jjtn000 = new AST_Identifier(JJT_IDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; }
{/*@bgen(jjtree) _Identifier */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setIdentifier(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Literal() : /* Literal constants (signed/unsigned integer, float, boolean, char and string) */
{/*@bgen(jjtree) _Literal */
  AST_Literal jjtn000 = new AST_Literal(JJT_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t, t2 = null; }
{/*@bgen(jjtree) _Literal */
        try {
/*@egen*/
	( t = <LITERAL_INT_BIN>   { jjtn000.setLiteral(t.image, LiteralType.INT_BIN); } | /* Binary integer      */
	  t = <LITERAL_INT_OCT>   { jjtn000.setLiteral(t.image, LiteralType.INT_OCT); } | /* Octal integer       */
	  t = <LITERAL_INT_DEC>   { jjtn000.setLiteral(t.image, LiteralType.INT_DEC); } | /* Decimal integer     */
	  t = <LITERAL_INT_HEX>   { jjtn000.setLiteral(t.image, LiteralType.INT_HEX); } | /* Hexadecimal integer */
	  t = <LITERAL_FLOAT32>   { jjtn000.setLiteral(t.image, LiteralType.FLOAT32); } | /* 32-bit float        */
	  t = <LITERAL_FLOAT64>   { jjtn000.setLiteral(t.image, LiteralType.FLOAT64); } | /* 64-bit float        */
	  t = <LITERAL_BOOL>      { jjtn000.setLiteral(t.image, LiteralType.BOOL);    } | /* Boolean             */
	  t = <CHARACTER_LITERAL> { jjtn000.setLiteral(t.image, LiteralType.CHAR);    } | /* Character           */
	  t = <STRING_LITERAL>    { jjtn000.setLiteral(t.image, LiteralType.STRING);  } ) /* String              */

	/* A type suffix */
	( LOOKAHEAD(2) t2 = _Literal_Primitive_Suffix() { jjtn000.setLiteralSuffix(t2.image); } )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

Token _Literal_Primitive_Suffix() : /* Supported native data type suffixes */
{/*@bgen(jjtree) _Literal_Primitive_Suffix */
  AST_Literal_Primitive_Suffix jjtn000 = new AST_Literal_Primitive_Suffix(JJT_LITERAL_PRIMITIVE_SUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t = null; }
{/*@bgen(jjtree) _Literal_Primitive_Suffix */
        try {
/*@egen*/
	( t=<U8>     | t=<U16>   | t=<U32>   | t=<U64>   |
	  t=<I8>     | t=<I16>   | t=<I32>   | t=<I64>   |
	  t=<F32>    | t=<F64>   | t=<BOOL>  | t=<CHAR>  |
	  t=<STRING> | t=<USIZE> | t=<ISIZE> | t=<ARRAY> |
	  t=<AUTO>   | t=<TYPE>  | t=<MOD> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setType(TypePrimitive.values()[t.kind - U8 + 1], null, null);
		return t;
	}

	/* A custom suffix. Examples: u1, i48, u1024, sz2048 */
|	( t = <LITERAL_SUFFIX> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setType(t.image, null, TypeModifier.RESIZED, null);
		return t;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/********************************************
*********************************************
** Lower level *specialised* constructs *****
*********************************************
*********************************************/

/**-------------**/
/** Expressions **/
/**-------------**/

/** (The following
 *   productions cascade until the 
 *   '_Expression_Primary' production). **/

void _Expression_CondOr()       : {}
{
	_Expression_CondAnd() ( LOOKAHEAD(2) "||"/*@bgen(jjtree) #_Expression(true) */
                                                  {
                                                    AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                    jjtn001.jjtSetFirstToken(getToken(1));
                                                  }
                                                  try {
/*@egen*/ _Expression_CondAnd()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte001) {
                                                    if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte001;
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      throw (ParseException)jjte001;
                                                    }
                                                    throw (Error)jjte001;
                                                  } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                      jjtn001.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/                { jjtn001.setExpr("||", ExpressionType.CONDOR); } )*
}

void _Expression_CondAnd()       : {}
{
	_Expression_IncOr() ( LOOKAHEAD(2) "&&"/*@bgen(jjtree) #_Expression(true) */
                                                {
                                                  AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                  jjtn001.jjtSetFirstToken(getToken(1));
                                                }
                                                try {
/*@egen*/ _Expression_IncOr()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte001) {
                                                  if (jjtc001) {
                                                    jjtree.clearNodeScope(jjtn001);
                                                    jjtc001 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte001 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte001;
                                                  }
                                                  if (jjte001 instanceof ParseException) {
                                                    throw (ParseException)jjte001;
                                                  }
                                                  throw (Error)jjte001;
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001, true);
                                                    jjtn001.jjtSetLastToken(getToken(0));
                                                  }
                                                }
/*@egen*/                { jjtn001.setExpr("&&", ExpressionType.CONDAND); } )*
}

void _Expression_IncOr()       : {}
{
	_Expression_ExOr() ( LOOKAHEAD(2) "|"/*@bgen(jjtree) #_Expression(true) */
                                              {
                                                AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                                jjtn001.jjtSetFirstToken(getToken(1));
                                              }
                                              try {
/*@egen*/ _Expression_ExOr()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte001) {
                                                if (jjtc001) {
                                                  jjtree.clearNodeScope(jjtn001);
                                                  jjtc001 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte001 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte001;
                                                }
                                                if (jjte001 instanceof ParseException) {
                                                  throw (ParseException)jjte001;
                                                }
                                                throw (Error)jjte001;
                                              } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001, true);
                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/                { jjtn001.setExpr("|", ExpressionType.INCOR); } )*
}

void _Expression_ExOr()       : {}
{
	_Expression_And() ( LOOKAHEAD(2) "^"/*@bgen(jjtree) #_Expression(true) */
                                             {
                                               AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                               jjtn001.jjtSetFirstToken(getToken(1));
                                             }
                                             try {
/*@egen*/ _Expression_And()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte001) {
                                               if (jjtc001) {
                                                 jjtree.clearNodeScope(jjtn001);
                                                 jjtc001 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte001 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte001;
                                               }
                                               if (jjte001 instanceof ParseException) {
                                                 throw (ParseException)jjte001;
                                               }
                                               throw (Error)jjte001;
                                             } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001, true);
                                                 jjtn001.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/                { jjtn001.setExpr("^", ExpressionType.EXOR); } )*
}

void _Expression_And()       : {}
{
	_Expression_Equal() ( LOOKAHEAD(2) "&"/*@bgen(jjtree) #_Expression(true) */
                                               {
                                                 AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
                                               }
                                               try {
/*@egen*/ _Expression_Equal()/*@bgen(jjtree)*/
                                               } catch (Throwable jjte001) {
                                                 if (jjtc001) {
                                                   jjtree.clearNodeScope(jjtn001);
                                                   jjtc001 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte001 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte001;
                                                 }
                                                 if (jjte001 instanceof ParseException) {
                                                   throw (ParseException)jjte001;
                                                 }
                                                 throw (Error)jjte001;
                                               } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/                { jjtn001.setExpr("&", ExpressionType.AND); } )*
}

void _Expression_Equal()       : {}
{
	_Expression_Relational()
	( LOOKAHEAD(2)
	  ( "=="/*@bgen(jjtree) #_Expression(true) */
                 {
                   AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ _Expression_Relational()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                { jjtn001.setExpr("==", ExpressionType.EQUAL); } |
        "!="/*@bgen(jjtree) #_Expression(true) */
             {
               AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtn002.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/ _Expression_Relational()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtn002.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                { jjtn002.setExpr("!=", ExpressionType.EQUAL); } ) )*
}

void _Expression_Relational()       : {}
{
	_Expression_Shift() 
	( LOOKAHEAD(2)
	  ( "<"/*@bgen(jjtree) #_Expression(true) */
                 {
                   AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/  _Expression_Shift()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                { jjtn001.setExpr("<",  ExpressionType.REL); } | 
	    ">"/*@bgen(jjtree) #_Expression(true) */
                 {
                   AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/  _Expression_Shift()/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                { jjtn002.setExpr(">",  ExpressionType.REL); } | 
	    "<="/*@bgen(jjtree) #_Expression(true) */
                 {
                   AST_Expression jjtn003 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ _Expression_Shift()/*@bgen(jjtree)*/
                 } catch (Throwable jjte003) {
                   if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     throw (RuntimeException)jjte003;
                   }
                   if (jjte003 instanceof ParseException) {
                     throw (ParseException)jjte003;
                   }
                   throw (Error)jjte003;
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                { jjtn003.setExpr("<=", ExpressionType.REL); } | 
	    ">="/*@bgen(jjtree) #_Expression(true) */
                 {
                   AST_Expression jjtn004 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                   jjtn004.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ _Expression_Shift()/*@bgen(jjtree)*/
                 } catch (Throwable jjte004) {
                   if (jjtc004) {
                     jjtree.clearNodeScope(jjtn004);
                     jjtc004 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte004 instanceof RuntimeException) {
                     throw (RuntimeException)jjte004;
                   }
                   if (jjte004 instanceof ParseException) {
                     throw (ParseException)jjte004;
                   }
                   throw (Error)jjte004;
                 } finally {
                   if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtn004.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                { jjtn004.setExpr(">=", ExpressionType.REL); } ) )*
}

void _Expression_Shift()       : {}
{
	_Expression_Additive() 
	( LOOKAHEAD(2)
	  ( "<<"/*@bgen(jjtree) #_Expression(true) */
                  {
                    AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/  _Expression_Additive()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                { jjtn001.setExpr("<<",  ExpressionType.SHT); } | 
	    ">>"/*@bgen(jjtree) #_Expression(true) */
                  {
                    AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/  _Expression_Additive()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                { jjtn002.setExpr(">>",  ExpressionType.SHT); } ) )*
}

void _Expression_Additive()       : {}
{
	_Expression_Multiplicative()
	( LOOKAHEAD(2)
	  ( "+"/*@bgen(jjtree) #_Expression(true) */
                {
                  AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ _Expression_Multiplicative()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                { jjtn001.setExpr("+",  ExpressionType.ADD); } |
        "-"/*@bgen(jjtree) #_Expression(true) */
            {
              AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ _Expression_Multiplicative()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/                { jjtn002.setExpr("-",  ExpressionType.ADD); } ) )*
}

void _Expression_Multiplicative()       : {}
{
	_Expression_Cast()
	( LOOKAHEAD(2)
	  ( "*"/*@bgen(jjtree) #_Expression(true) */
                {
                  AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ _Expression_Cast()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                { jjtn001.setExpr("*",  ExpressionType.MUL); } |
        "/"/*@bgen(jjtree) #_Expression(true) */
            {
              AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ _Expression_Cast()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/                { jjtn002.setExpr("/",  ExpressionType.MUL); } |
	    "%"/*@bgen(jjtree) #_Expression(true) */
                {
                  AST_Expression jjtn003 = new AST_Expression(JJT_EXPRESSION);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtn003.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ _Expression_Cast()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtn003.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                { jjtn003.setExpr("%",  ExpressionType.MUL); } ) )*
}

void _Expression_Cast()       : {}
{
	LOOKAHEAD(3)/*@bgen(jjtree) #_Expression(true) */
                     {
                       AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ ( "(" ( LOOKAHEAD(2) _Type() | _Literal_Primitive_Suffix() ) ")" ( LOOKAHEAD(2) _Expression_Unary() )? )/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/               
	{
		jjtn001.setExpr("CAST", ExpressionType.CAST);
	} 
|	_Expression_Unary()
}

void _Expression_Unary()       : {}
{
	"++"/*@bgen(jjtree) #_Expression(true) */
             {
               AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtn001.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/ _Expression_Unary()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtn001.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                { jjtn001.setExpr("++", ExpressionType.UNARY); }
|	"--"/*@bgen(jjtree) #_Expression(true) */
             {
               AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtn002.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/ _Expression_Unary()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtn002.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                { jjtn002.setExpr("--", ExpressionType.UNARY); }
|	"~"/*@bgen(jjtree) #_Expression(true) */
             {
               AST_Expression jjtn003 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
               jjtn003.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/  _Expression_Unary()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003, true);
                 jjtn003.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                { jjtn003.setExpr("~",  ExpressionType.UNARY); }
|	"!"/*@bgen(jjtree) #_Expression(true) */
             {
               AST_Expression jjtn004 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
               jjtn004.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/  _Expression_Unary()/*@bgen(jjtree)*/
             } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 throw (RuntimeException)jjte004;
               }
               if (jjte004 instanceof ParseException) {
                 throw (ParseException)jjte004;
               }
               throw (Error)jjte004;
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
                 jjtn004.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                { jjtn004.setExpr("!",  ExpressionType.UNARY); }
|	"+"/*@bgen(jjtree) #_Expression(true) */
             {
               AST_Expression jjtn005 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc005 = true;
               jjtree.openNodeScope(jjtn005);
               jjtn005.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/  _Expression_Unary()/*@bgen(jjtree)*/
             } catch (Throwable jjte005) {
               if (jjtc005) {
                 jjtree.clearNodeScope(jjtn005);
                 jjtc005 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte005 instanceof RuntimeException) {
                 throw (RuntimeException)jjte005;
               }
               if (jjte005 instanceof ParseException) {
                 throw (ParseException)jjte005;
               }
               throw (Error)jjte005;
             } finally {
               if (jjtc005) {
                 jjtree.closeNodeScope(jjtn005, true);
                 jjtn005.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                { jjtn005.setExpr("+",  ExpressionType.UNARY); }
|	"-"/*@bgen(jjtree) #_Expression(true) */
             {
               AST_Expression jjtn006 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc006 = true;
               jjtree.openNodeScope(jjtn006);
               jjtn006.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/  _Expression_Unary()/*@bgen(jjtree)*/
             } catch (Throwable jjte006) {
               if (jjtc006) {
                 jjtree.clearNodeScope(jjtn006);
                 jjtc006 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte006 instanceof RuntimeException) {
                 throw (RuntimeException)jjte006;
               }
               if (jjte006 instanceof ParseException) {
                 throw (ParseException)jjte006;
               }
               throw (Error)jjte006;
             } finally {
               if (jjtc006) {
                 jjtree.closeNodeScope(jjtn006, true);
                 jjtn006.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                { jjtn006.setExpr("-",  ExpressionType.UNARY); }
|	"*"/*@bgen(jjtree) #_Expression(true) */
             {
               AST_Expression jjtn007 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc007 = true;
               jjtree.openNodeScope(jjtn007);
               jjtn007.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/  _Expression_Unary()/*@bgen(jjtree)*/
             } catch (Throwable jjte007) {
               if (jjtc007) {
                 jjtree.clearNodeScope(jjtn007);
                 jjtc007 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte007 instanceof RuntimeException) {
                 throw (RuntimeException)jjte007;
               }
               if (jjte007 instanceof ParseException) {
                 throw (ParseException)jjte007;
               }
               throw (Error)jjte007;
             } finally {
               if (jjtc007) {
                 jjtree.closeNodeScope(jjtn007, true);
                 jjtn007.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                { jjtn007.setExpr("*",  ExpressionType.UNARY); }
|	"&"/*@bgen(jjtree) #_Expression(true) */
             {
               AST_Expression jjtn008 = new AST_Expression(JJT_EXPRESSION);
               boolean jjtc008 = true;
               jjtree.openNodeScope(jjtn008);
               jjtn008.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/  _Expression_Unary()/*@bgen(jjtree)*/
             } catch (Throwable jjte008) {
               if (jjtc008) {
                 jjtree.clearNodeScope(jjtn008);
                 jjtc008 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte008 instanceof RuntimeException) {
                 throw (RuntimeException)jjte008;
               }
               if (jjte008 instanceof ParseException) {
                 throw (ParseException)jjte008;
               }
               throw (Error)jjte008;
             } finally {
               if (jjtc008) {
                 jjtree.closeNodeScope(jjtn008, true);
                 jjtn008.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                { jjtn008.setExpr("&",  ExpressionType.UNARY); }
|	_Expression_Postfix()
}

void _Expression_Postfix()       :
{ Token t = null, t2 = null; }
{
	_Expression_Primary()

	( LOOKAHEAD(2)
		(
			/* Array */
			LOOKAHEAD(3) _Declaration_Array()
			|
			/* Array Slice */
			_Declaration_Array_Slice()
			|/*@bgen(jjtree) #_Expression(true) */
                        {
                          AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtn001.jjtSetFirstToken(getToken(1));
                        }
                        try {
/*@egen*/
			/* Calling function syntax */	
			(		
				t = "(" _Declaration_Parameter_Caller_List() t2 = ")"
				
				| t = "--"               /* Decrementing             */
				| t = "++"               /* Incrementing             */
				| t = "."  _Identifier() /* Accessing member         */
				| t = "->" _Identifier() /* Accessing pointer member */
			)/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtn001.jjtSetLastToken(getToken(0));
                          }
                        }
/*@egen*/               
			{
				jjtn001.setExpr( t.image + (t2 != null ? t2.image : ""), ExpressionType.POST);
				t = t2 = null;
			}
		)
	)*		
}

void _Expression_Primary()       : {} /* Primary Expression: <identifier> | <literal> | ( <expression> ) | ( <array_decl>* ) | <blockunit> | etc.. */
{
	/* A primary expression can be ... */
	LOOKAHEAD(2) _Identifier()                 /* An identifier                                                        */
|	LOOKAHEAD(2) _Literal()                    /* A literal                                                            */
|	LOOKAHEAD(3) "(" _Expression_Wrapped() ")" /* Another expression wrapped around (), which could be also be a tuple */
|	LOOKAHEAD(3) _Declaration_Array()          /* An array                                                             */
|	LOOKAHEAD(3) _Declaration_Array_Slice()    /* A slice of an array                                                  */
|	LOOKAHEAD(2) _Type()             /* A variable type                                                      */
|	LOOKAHEAD(2) _BlockUnit()                  /* A whole block unit                                                   */
|	_Statement_If()                            /* An if statement                                                      */
|	_Statement_Switch()                        /* A switch statement                                                   */
|	LOOKAHEAD(2) _Statement_For()              /* A for statement                                                      */
|	_Statement_While()                         /* A while statement                                                    */
}

void _Expression_Wrapped() : {/*@bgen(jjtree) _Expression_Wrapped */
  AST_Expression_Wrapped jjtn000 = new AST_Expression_Wrapped(JJT_EXPRESSION_WRAPPED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* An expression wrapped with (): ( <expression> ( "," <expression>? )* )+ */
{/*@bgen(jjtree) _Expression_Wrapped */
        try {
/*@egen*/
	( LOOKAHEAD(2)/*@bgen(jjtree) #_Declaration_Tuple_Arg(true) */
                       {
                         AST_Declaration_Tuple_Arg jjtn002 = new AST_Declaration_Tuple_Arg(JJT_DECLARATION_TUPLE_ARG);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*/ (/*@bgen(jjtree) #_Expression(true) */
                         {
                           AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/                )/*@bgen(jjtree)*/
                       } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           throw (RuntimeException)jjte002;
                         }
                         if (jjte002 instanceof ParseException) {
                           throw (ParseException)jjte002;
                         }
                         throw (Error)jjte002;
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/                           ( ","/*@bgen(jjtree) #_Declaration_Tuple_Arg(true) */
                                                                                        {
                                                                                          AST_Declaration_Tuple_Arg jjtn004 = new AST_Declaration_Tuple_Arg(JJT_DECLARATION_TUPLE_ARG);
                                                                                          boolean jjtc004 = true;
                                                                                          jjtree.openNodeScope(jjtn004);
                                                                                          jjtn004.jjtSetFirstToken(getToken(1));
                                                                                        }
                                                                                        try {
/*@egen*/ ( LOOKAHEAD(2)/*@bgen(jjtree) #_Expression(true) */
                                                                                                       {
                                                                                                         AST_Expression jjtn003 = new AST_Expression(JJT_EXPRESSION);
                                                                                                         boolean jjtc003 = true;
                                                                                                         jjtree.openNodeScope(jjtn003);
                                                                                                         jjtn003.jjtSetFirstToken(getToken(1));
                                                                                                       }
                                                                                                       try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                                                                                                       } catch (Throwable jjte003) {
                                                                                                         if (jjtc003) {
                                                                                                           jjtree.clearNodeScope(jjtn003);
                                                                                                           jjtc003 = false;
                                                                                                         } else {
                                                                                                           jjtree.popNode();
                                                                                                         }
                                                                                                         if (jjte003 instanceof RuntimeException) {
                                                                                                           throw (RuntimeException)jjte003;
                                                                                                         }
                                                                                                         if (jjte003 instanceof ParseException) {
                                                                                                           throw (ParseException)jjte003;
                                                                                                         }
                                                                                                         throw (Error)jjte003;
                                                                                                       } finally {
                                                                                                         if (jjtc003) {
                                                                                                           jjtree.closeNodeScope(jjtn003, true);
                                                                                                           jjtn003.jjtSetLastToken(getToken(0));
                                                                                                         }
                                                                                                       }
/*@egen*/                )?/*@bgen(jjtree)*/
                                                                                        } catch (Throwable jjte004) {
                                                                                          if (jjtc004) {
                                                                                            jjtree.clearNodeScope(jjtn004);
                                                                                            jjtc004 = false;
                                                                                          } else {
                                                                                            jjtree.popNode();
                                                                                          }
                                                                                          if (jjte004 instanceof RuntimeException) {
                                                                                            throw (RuntimeException)jjte004;
                                                                                          }
                                                                                          if (jjte004 instanceof ParseException) {
                                                                                            throw (ParseException)jjte004;
                                                                                          }
                                                                                          throw (Error)jjte004;
                                                                                        } finally {
                                                                                          if (jjtc004) {
                                                                                            jjtree.closeNodeScope(jjtn004, true);
                                                                                            jjtn004.jjtSetLastToken(getToken(0));
                                                                                          }
                                                                                        }
/*@egen*/                           )* )+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**------------**/
/** Statements **/
/**------------**/
void _Statement_Expression() : /* Statement expression: <expression> <assignment>* ( ";" )? */
{/*@bgen(jjtree) _Statement_Expression */
  AST_Statement_Expression jjtn000 = new AST_Statement_Expression(JJT_STATEMENT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t = null; }
{/*@bgen(jjtree) _Statement_Expression */
        try {
/*@egen*//*@bgen(jjtree) #_Expression(true) */
        {
          AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	_Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                ( LOOKAHEAD(2) _Assignment() )* ( LOOKAHEAD(2) t = ";" )?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn001.setExpr(Utils.NULLSTR, ExpressionType.BLOB, (t == null));
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Statement_If() : {/*@bgen(jjtree) _Statement_If */
  AST_Statement_If jjtn000 = new AST_Statement_If(JJT_STATEMENT_IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* If statement: if ( <expression> ) (<blockunit>|<all>) (else (<blockunit>|<all>))? */
{/*@bgen(jjtree) _Statement_If */
        try {
/*@egen*/
	<IF> "("/*@bgen(jjtree) #_Expression(true) */
                 {
                   AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                ")"/*@bgen(jjtree) #_Statement_If_True(true) */
                                                  {
                                                    AST_Statement_If_True jjtn002 = new AST_Statement_If_True(JJT_STATEMENT_IF_TRUE);
                                                    boolean jjtc002 = true;
                                                    jjtree.openNodeScope(jjtn002);
                                                    jjtn002.jjtSetFirstToken(getToken(1));
                                                  }
                                                  try {
/*@egen*/ ( LOOKAHEAD(3) _BlockUnit() | _All() )/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte002) {
                                                    if (jjtc002) {
                                                      jjtree.clearNodeScope(jjtn002);
                                                      jjtc002 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte002 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte002;
                                                    }
                                                    if (jjte002 instanceof ParseException) {
                                                      throw (ParseException)jjte002;
                                                    }
                                                    throw (Error)jjte002;
                                                  } finally {
                                                    if (jjtc002) {
                                                      jjtree.closeNodeScope(jjtn002, true);
                                                      jjtn002.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/                      
	( LOOKAHEAD(2) <ELSE>/*@bgen(jjtree) #_Statement_If_False(true) */
                              {
                                AST_Statement_If_False jjtn003 = new AST_Statement_If_False(JJT_STATEMENT_IF_FALSE);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                                jjtn003.jjtSetFirstToken(getToken(1));
                              }
                              try {
/*@egen*/ ( LOOKAHEAD(3) _BlockUnit() | _All() )/*@bgen(jjtree)*/
                              } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte003;
                                }
                                if (jjte003 instanceof ParseException) {
                                  throw (ParseException)jjte003;
                                }
                                throw (Error)jjte003;
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, true);
                                  jjtn003.jjtSetLastToken(getToken(0));
                                }
                              }
/*@egen*/                        )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Statement_Switch() : {/*@bgen(jjtree) _Statement_Switch */
  AST_Statement_Switch jjtn000 = new AST_Statement_Switch(JJT_STATEMENT_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* Switch statement: switch ( ( <match>,? )+ ) { <switchline>+ } */
{/*@bgen(jjtree) _Statement_Switch */
        try {
/*@egen*/
	<SWITCH> "("/*@bgen(jjtree) #_Statement_Switch_Match_List(true) */
                     {
                       AST_Statement_Switch_Match_List jjtn001 = new AST_Statement_Switch_Match_List(JJT_STATEMENT_SWITCH_MATCH_LIST);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ ( ( _Statement_Switch_Match_Single() ( "," )? )+ )/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/                                 ")"
	"{"/*@bgen(jjtree) #_Statement_Switch_Line_List(true) */
            {
              AST_Statement_Switch_Line_List jjtn002 = new AST_Statement_Switch_Line_List(JJT_STATEMENT_SWITCH_LINE_LIST);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ ( LOOKAHEAD(2) _Statement_Switch_Line() ( "," )? )+/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/                                "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Statement_Switch_Line() : {/*@bgen(jjtree) _Statement_Switch_Line */
  AST_Statement_Switch_Line jjtn000 = new AST_Statement_Switch_Line(JJT_STATEMENT_SWITCH_LINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* A whole switch line: @(else, <switchmatch,?>* ) : (<blockunit>|<switchmatchbody>+) */
{/*@bgen(jjtree) _Statement_Switch_Line */
        try {
/*@egen*//*@bgen(jjtree) #_Statement_Switch_Match_List(true) */
        {
          AST_Statement_Switch_Match_List jjtn001 = new AST_Statement_Switch_Match_List(JJT_STATEMENT_SWITCH_MATCH_LIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	/* Switch condition list of a single switch line */
	( _Declaration_Bind() ( <ELSE> | ( _Statement_Switch_Match_Single() ( "," )? )* ) )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                                 ":"
	
	/* Switch body list of a single switch line */
	( LOOKAHEAD(3)/*@bgen(jjtree) #_Statement_Switch_Line_Body_List(true) */
                {
                  AST_Statement_Switch_Line_Body_List jjtn002 = new AST_Statement_Switch_Line_Body_List(JJT_STATEMENT_SWITCH_LINE_BODY_LIST);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/
		_BlockUnit()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                                    
		|/*@bgen(jjtree) #_Statement_Switch_Line_Body_List(true) */
                {
                  AST_Statement_Switch_Line_Body_List jjtn003 = new AST_Statement_Switch_Line_Body_List(JJT_STATEMENT_SWITCH_LINE_BODY_LIST);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtn003.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/
		( LOOKAHEAD(2) _Statement_Switch_Line_Body_Single() )+/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtn003.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                                    
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Statement_Switch_Match_Single() : {/*@bgen(jjtree) _Statement_Switch_Match_Single */
  AST_Statement_Switch_Match_Single jjtn000 = new AST_Statement_Switch_Match_Single(JJT_STATEMENT_SWITCH_MATCH_SINGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* What a switch "matching container" / "line condition" can be matched against */
{/*@bgen(jjtree) _Statement_Switch_Match_Single */
        try {
/*@egen*/
	/* Can be matched against... */
	LOOKAHEAD(3)/*@bgen(jjtree) #_Expression(true) */
                     {
                       AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/                | /* An expression         */
	_Type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                           /* A primitive data type */
}

void _Statement_Switch_Line_Body_Single()       : /* The body of a single switch line */
{ Token t = null; }
{	
	/* Declarations -> variables, functions, classes, structs, enums */
	LOOKAHEAD(5) _Declaration()

	/* A returnable and NON-returnable expression -> a + 1 + 2 + 3 + b  !OR!  a + 1 + 2 + 3 + b; */
|	LOOKAHEAD(3)/*@bgen(jjtree) #_Expression(true) */
                     {
                       AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ ( _Expression() ( LOOKAHEAD(2) t = ";" )? )/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/               
	{
		jjtn001.setExpr("(null)", ExpressionType.BLOB, (t == null));
	}

	/* Statements -> if, switch, for, while */
|	LOOKAHEAD(3) _Statement()
}

void _Statement_For() : {/*@bgen(jjtree) _Statement_For */
  AST_Statement_For jjtn000 = new AST_Statement_For(JJT_STATEMENT_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* For statement: for (<declvar> : <expression> | (<declvar>,?)*;<expression>?;<expression>?) (<blockunit>|<all>|;) */
{/*@bgen(jjtree) _Statement_For */
        try {
/*@egen*/
	<FOR> "("

		( LOOKAHEAD(3)/*@bgen(jjtree) #_Statement_Foreach_InitBranch(true) */
                        {
                          AST_Statement_Foreach_InitBranch jjtn001 = new AST_Statement_Foreach_InitBranch(JJT_STATEMENT_FOREACH_INITBRANCH);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtn001.jjtSetFirstToken(getToken(1));
                        }
                        try {
/*@egen*/
			/** Foreach declaration **/
			_Declaration_Object()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtn001.jjtSetLastToken(getToken(0));
                          }
                        }
/*@egen*/                                  ":"/*@bgen(jjtree) #_Expression(true) */
                                                                                   {
                                                                                     AST_Expression jjtn002 = new AST_Expression(JJT_EXPRESSION);
                                                                                     boolean jjtc002 = true;
                                                                                     jjtree.openNodeScope(jjtn002);
                                                                                     jjtn002.jjtSetFirstToken(getToken(1));
                                                                                   }
                                                                                   try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                                                                                   } catch (Throwable jjte002) {
                                                                                     if (jjtc002) {
                                                                                       jjtree.clearNodeScope(jjtn002);
                                                                                       jjtc002 = false;
                                                                                     } else {
                                                                                       jjtree.popNode();
                                                                                     }
                                                                                     if (jjte002 instanceof RuntimeException) {
                                                                                       throw (RuntimeException)jjte002;
                                                                                     }
                                                                                     if (jjte002 instanceof ParseException) {
                                                                                       throw (ParseException)jjte002;
                                                                                     }
                                                                                     throw (Error)jjte002;
                                                                                   } finally {
                                                                                     if (jjtc002) {
                                                                                       jjtree.closeNodeScope(jjtn002, true);
                                                                                       jjtn002.jjtSetLastToken(getToken(0));
                                                                                     }
                                                                                   }
/*@egen*/               

			|/*@bgen(jjtree) #_Statement_For_InitBranch(true) */
                        {
                          AST_Statement_For_InitBranch jjtn003 = new AST_Statement_For_InitBranch(JJT_STATEMENT_FOR_INITBRANCH);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                          jjtn003.jjtSetFirstToken(getToken(1));
                        }
                        try {
/*@egen*/ /** or ... **/
			
			/** Normal for declaration        **/
			/* For loop initialization branch  */
			( ( LOOKAHEAD(3) _Declaration_Object() | _Assignment() ) ( "," )? )*/*@bgen(jjtree)*/
                        } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            throw (RuntimeException)jjte003;
                          }
                          if (jjte003 instanceof ParseException) {
                            throw (ParseException)jjte003;
                          }
                          throw (Error)jjte003;
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtn003.jjtSetLastToken(getToken(0));
                          }
                        }
/*@egen*/                              ";"
		
			/* For loop condition branch */
			(/*@bgen(jjtree) #_Expression(true) */
                          {
                            AST_Expression jjtn004 = new AST_Expression(JJT_EXPRESSION);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
                            jjtn004.jjtSetFirstToken(getToken(1));
                          }
                          try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                          } catch (Throwable jjte004) {
                            if (jjtc004) {
                              jjtree.clearNodeScope(jjtn004);
                              jjtc004 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte004 instanceof RuntimeException) {
                              throw (RuntimeException)jjte004;
                            }
                            if (jjte004 instanceof ParseException) {
                              throw (ParseException)jjte004;
                            }
                            throw (Error)jjte004;
                          } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                              jjtn004.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/                )? ";"/*@bgen(jjtree) #_Statement_For_IterateBranch(true) */
                        {
                          AST_Statement_For_IterateBranch jjtn006 = new AST_Statement_For_IterateBranch(JJT_STATEMENT_FOR_ITERATEBRANCH);
                          boolean jjtc006 = true;
                          jjtree.openNodeScope(jjtn006);
                          jjtn006.jjtSetFirstToken(getToken(1));
                        }
                        try {
/*@egen*/

			/* For iteration branch */
			(/*@bgen(jjtree) #_Expression(true) */
                          {
                            AST_Expression jjtn005 = new AST_Expression(JJT_EXPRESSION);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
                            jjtn005.jjtSetFirstToken(getToken(1));
                          }
                          try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                          } catch (Throwable jjte005) {
                            if (jjtc005) {
                              jjtree.clearNodeScope(jjtn005);
                              jjtc005 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte005 instanceof RuntimeException) {
                              throw (RuntimeException)jjte005;
                            }
                            if (jjte005 instanceof ParseException) {
                              throw (ParseException)jjte005;
                            }
                            throw (Error)jjte005;
                          } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                              jjtn005.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/                ( "," )? )*/*@bgen(jjtree)*/
                        } catch (Throwable jjte006) {
                          if (jjtc006) {
                            jjtree.clearNodeScope(jjtn006);
                            jjtc006 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte006 instanceof RuntimeException) {
                            throw (RuntimeException)jjte006;
                          }
                          if (jjte006 instanceof ParseException) {
                            throw (ParseException)jjte006;
                          }
                          throw (Error)jjte006;
                        } finally {
                          if (jjtc006) {
                            jjtree.closeNodeScope(jjtn006, true);
                            jjtn006.jjtSetLastToken(getToken(0));
                          }
                        }
/*@egen*/                                 

		) ")"/*@bgen(jjtree) #_Statement_For_BodyBranch(true) */
        {
          AST_Statement_For_BodyBranch jjtn007 = new AST_Statement_For_BodyBranch(JJT_STATEMENT_FOR_BODYBRANCH);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          jjtn007.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/

	/* For loop body */
	( LOOKAHEAD(3) _BlockUnit() | _All() )/*@bgen(jjtree)*/
        } catch (Throwable jjte007) {
          if (jjtc007) {
            jjtree.clearNodeScope(jjtn007);
            jjtc007 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte007 instanceof RuntimeException) {
            throw (RuntimeException)jjte007;
          }
          if (jjte007 instanceof ParseException) {
            throw (ParseException)jjte007;
          }
          throw (Error)jjte007;
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
            jjtn007.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                             /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Statement_While() : {/*@bgen(jjtree) _Statement_While */
  AST_Statement_While jjtn000 = new AST_Statement_While(JJT_STATEMENT_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} /* While statement: while ( <expression> ) (<blockunit>|<all>|;) */
{/*@bgen(jjtree) _Statement_While */
        try {
/*@egen*/
	<WHILE> "("/*@bgen(jjtree) #_Expression(true) */
                    {
                      AST_Expression jjtn001 = new AST_Expression(JJT_EXPRESSION);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtn001.jjtSetFirstToken(getToken(1));
                    }
                    try {
/*@egen*/ _Expression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
                    }
/*@egen*/                ")"/*@bgen(jjtree) #_Statement_While_BodyBranch(true) */
                                                     {
                                                       AST_Statement_While_BodyBranch jjtn002 = new AST_Statement_While_BodyBranch(JJT_STATEMENT_WHILE_BODYBRANCH);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
                                                       jjtn002.jjtSetFirstToken(getToken(1));
                                                     }
                                                     try {
/*@egen*/ ( LOOKAHEAD(3) _BlockUnit() | _All() )/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte002) {
                                                       if (jjtc002) {
                                                         jjtree.clearNodeScope(jjtn002);
                                                         jjtc002 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte002 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte002;
                                                       }
                                                       if (jjte002 instanceof ParseException) {
                                                         throw (ParseException)jjte002;
                                                       }
                                                       throw (Error)jjte002;
                                                     } finally {
                                                       if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002, true);
                                                         jjtn002.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/                               /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Statement_Flow()       : /* A statement that disrupts the normal flow of the program. */
{ Token t; }
{
	( t=<CONTINUE> | t=<BREAK> | t=<RETURN> )/*@bgen(jjtree) #_Statement_Flow(true) */
                                                  {
                                                    AST_Statement_Flow jjtn001 = new AST_Statement_Flow(JJT_STATEMENT_FLOW);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                    jjtn001.jjtSetFirstToken(getToken(1));
                                                  }
                                                  try {
/*@egen*/ ( LOOKAHEAD(2) _Expression() )?/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte001) {
                                                    if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte001;
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      throw (ParseException)jjte001;
                                                    }
                                                    throw (Error)jjte001;
                                                  } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                      jjtn001.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/                   
	{
		jjtn001.setIdentifier(t.image);
	}
|	"(" ( _Statement_Flow() )+ ")"
}

/**-------**/
/** Types **/
/**-------**/
SimpleNode _Type() : /* All primitive data types are declared here: <modif>? <tuple>|<classname>|<type> <unaryop>* */
{/*@bgen(jjtree) _Type */
  AST_Type jjtn000 = new AST_Type(JJT_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t = null; }
{/*@bgen(jjtree) _Type */
        try {
/*@egen*/
	(
		/* Check for access modifier */
		( _Type_Access_Modifier(jjtn000) )?
	
		(
			/* Is this type a tuple? */
			_Type_Tuple(jjtn000)
			
			/* A Class/Struct? */
		|	_Type_ClassStruct(jjtn000)
		
			/* Or perhaps a primitive data type? */
		|	( t=<U8>     | t=<U16>   | t=<U32>  | t=<U64>   |
			  t=<I8>     | t=<I16>   | t=<I32>  | t=<I64>   |
			  t=<F32>    | t=<F64>   | t=<BOOL> | t=<CHAR>  |
			  t=<STRING> | t=<USIZE> | t=<ISIZE>| t=<ARRAY> |
			  t=<AUTO>   | t=<TYPE>  | t=<MOD>  | <FN> )
			{
				jjtn000.setType(t != null ? TypePrimitive.values()[t.kind - U8 + 1] : TypePrimitive.VOIDFN, null, null);
			}
		)
		
		/* And what data type modifiers do we have? */
		( LOOKAHEAD(2) _Type_Modifier(jjtn000) )*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Type_Tuple(SimpleNode n)       : {} /* Tuples as primitive data types with types AND expressions: ( ( <type>|<expression> ,? )* ) */
{
	"(" ( LOOKAHEAD(2) ( LOOKAHEAD(3) _Type() | _Expression() ) ( LOOKAHEAD(2) "," )? )* ")"
	{
		n.setType(null, TypeModifier.TUPLE, null);
	}
}

void _Type_ClassStruct(SimpleNode n)       : /* Class and Struct data types are declared here */
{ Token t; }
{
	t = <IDENTIFIER>
	{
		n.setType(t.image, TypePrimitive.CLASS_STRUCT, null, null);
	}
}

void _Type_Modifier(SimpleNode n)       : {}
{
	/* Is it a pointer? */
	"*"
	{
		n.setType(null, TypeModifier.POINTER, null);
	}

	/* Or maybe a reference? */
|	"&"
	{
		n.setType(null, TypeModifier.REF, null);
	}

	/* Perhaps it could be an array? */
|	_Declaration_Object_Type_Postfix(n)
}

void _Type_Access_Modifier(SimpleNode n)       : /* Access modifiers go here */
{ Token t; }
{
	/* The modifiers are: pub, priv and prot 
	 * (public, private and protected) */
	( t = <PUB> | t = <PRIV> | t = <PROT> )
	{
		n.setType(null, null, TypeAccessModifier.values()[t.kind - PUB + 2]);
	}
}