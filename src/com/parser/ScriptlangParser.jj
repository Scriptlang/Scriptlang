/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ScriptlangParser.jj */
/*@egen*//**----------------**/
/** Parser options **/
/**----------------**/
options {
    LOOKAHEAD              = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK  = 1;
    STATIC                 = false;
    DEBUG_PARSER           = false;
    DEBUG_LOOKAHEAD        = false;
    DEBUG_TOKEN_MANAGER    = false;
    ERROR_REPORTING        = true;
    JAVA_UNICODE_ESCAPE    = false;
    UNICODE_INPUT          = false;
    IGNORE_CASE            = false;
    USER_TOKEN_MANAGER     = false;
    USER_CHAR_STREAM       = false;
    BUILD_PARSER           = true;
    BUILD_TOKEN_MANAGER    = true;
    SANITY_CHECK           = true;
    FORCE_LA_CHECK         = false;
                                  
                                          
                                  
}

PARSER_BEGIN(ScriptlangParser) /** ScriptLangParser Class - BEGIN **/
package com.parser;

import org.javacc.jjtree.JJTree;

public class ScriptlangParser/*@bgen(jjtree)*/implements ScriptlangParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTScriptlangParserState jjtree = new JJTScriptlangParserState();

/*@egen*/
    /** Get the root node of the AST **/
    public Node rootNode() {
    	return jjtree.rootNode();
    }
}

PARSER_END(ScriptlangParser) /** ScriptLangParser Class - END **/

/**--------------------**/
/** Token declarations **/
/**--------------------**/
SKIP :
{
	" "
|	"\t"
|	"\n"
|	"\r"
}

TOKEN :
{
	/* Block unit tokens */
	<LBRACE: "{">
|	<RBRACE: "}">

	/* Primitive data types */
|	<U8:    "u8"   >
|	<U16:   "u16"  >
|	<U32:   "u32"  >
|	<U64:   "u64"  >
|	<I8:    "i8"   >
|	<I16:   "i16"  >
|	<I32:   "i32"  >
|	<I64:   "i64"  >
|	<F32:   "f32"  >
|	<F64:   "f64"  >
|	<BOOL:  "bool" >
|	<CHAR:  "char" >
|	<USIZE: "usize">
|	<ISIZE: "isize">
|	<AUTO:  "auto" >

	/* Literals */
|	<INT_LITERAL: (<DIGIT>)+>

	/* Identifiers */
|	<IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)*>
|	<#LETTER: ["a"-"z", "A"-"Z"]>
|	<#DIGIT: ["0"-"9"]>
}

/**-----------------**/
/** Root production **/
/**-----------------**/
void _Root() :
{/*@bgen(jjtree) _Root */
  AST_Root jjtn000 = new AST_Root(JJT_ROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Root */
        try {
/*@egen*/
	( _All() )* <EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _All()       : /* Matches any kind of top level construct               */
{}                  /* (blocks ({}), statements and any kind of declaration) */
{
	_BlockUnit() | _Statement() | _GlobalDeclaration()
}

/**-------------------------**/
/** Higher level constructs **/
/**-------------------------**/
void _BlockUnit() :
{/*@bgen(jjtree) _BlockUnit */
  AST_BlockUnit jjtn000 = new AST_BlockUnit(JJT_BLOCKUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _BlockUnit */
    try {
/*@egen*/
    <LBRACE> ( _All() )* <RBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void _Statement() :
{/*@bgen(jjtree) _Statement */
  AST_Statement jjtn000 = new AST_Statement(JJT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Statement */
        try {
/*@egen*/
	";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _GlobalDeclaration() :
{/*@bgen(jjtree) _GlobalDeclaration */
  AST_GlobalDeclaration jjtn000 = new AST_GlobalDeclaration(JJT_GLOBALDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _GlobalDeclaration */
        try {
/*@egen*/
	","/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _LocalDeclaration() :
{/*@bgen(jjtree) _LocalDeclaration */
  AST_LocalDeclaration jjtn000 = new AST_LocalDeclaration(JJT_LOCALDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _LocalDeclaration */
        try {
/*@egen*/
	","/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**----------------------------------**/
/** Lower level *generic* constructs **/
/**----------------------------------**/
void _VariableDeclaration() : 
{/*@bgen(jjtree) _VariableDeclaration */
  AST_VariableDeclaration jjtn000 = new AST_VariableDeclaration(JJT_VARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _VariableDeclaration */
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _FunctionDeclaration() : 
{/*@bgen(jjtree) _FunctionDeclaration */
  AST_FunctionDeclaration jjtn000 = new AST_FunctionDeclaration(JJT_FUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _FunctionDeclaration */
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Expression() : 
{/*@bgen(jjtree) _Expression */
  AST_Expression jjtn000 = new AST_Expression(JJT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Expression */
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Assignment() : 
{/*@bgen(jjtree) _Assignment */
  AST_Assignment jjtn000 = new AST_Assignment(JJT_ASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Assignment */
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _LabeledStatement() :
{/*@bgen(jjtree) _LabeledStatement */
  AST_LabeledStatement jjtn000 = new AST_LabeledStatement(JJT_LABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _LabeledStatement */
        try {
/*@egen*/
	<IDENTIFIER> ":" _Statement()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Id() :
{/*@bgen(jjtree) _Id */
  AST_Id jjtn000 = new AST_Id(JJT_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Id */
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void _Literal() :
{/*@bgen(jjtree) _Literal */
  AST_Literal jjtn000 = new AST_Literal(JJT_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) _Literal */
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}