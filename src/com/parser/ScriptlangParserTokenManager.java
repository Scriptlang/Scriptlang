/* ScriptlangParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ScriptlangParserTokenManager.java */
                               /** ScriptLangParser Class - BEGIN **/
package com.parser;
import com.parser.nodes.Node_TypePrimitive.TypePrimitive;
import com.parser.nodes.Node_TypeModifier.TypeModifier;
import com.parser.nodes.Node_Literal.LiteralType;
import org.javacc.jjtree.SimpleNode;
import com.parser.nodes.Node_Expression.ExpressionType;

/** Token Manager. */
@SuppressWarnings("unused")public class ScriptlangParserTokenManager implements ScriptlangParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2010000c00000L) != 0L)
         {
            jjmatchedKind = 56;
            return 17;
         }
         if ((active0 & 0xa0L) != 0L || (active1 & 0x400000200L) != 0L)
            return 2;
         if ((active0 & 0x4000183fc000L) != 0L)
         {
            jjmatchedKind = 56;
            return 52;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 56;
            return 13;
         }
         if ((active0 & 0xbdbe0067000000L) != 0L)
         {
            jjmatchedKind = 56;
            return 20;
         }
         return -1;
      case 1:
         if ((active0 & 0x80L) != 0L)
            return 0;
         if ((active0 & 0x44000L) != 0L)
            return 53;
         if ((active0 & 0xbfbe00ff000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 1;
            }
            return 20;
         }
         if ((active0 & 0xfb8000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return 53;
         }
         if ((active0 & 0x410000000000L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x3dae00ff000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0xfb8000L) != 0L)
            return 53;
         if ((active0 & 0x82100000000000L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0x3d06005c000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active0 & 0xa800a3000000L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0x31040004000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0xc020058000000L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0x21040004000000L) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
            return 20;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 37:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 38:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x84000L);
      case 40:
         return jjStopAtPos(0, 67);
      case 41:
         return jjStopAtPos(0, 68);
      case 42:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 43:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000400L);
      case 44:
         return jjStopAtPos(0, 65);
      case 45:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x22000000800L);
      case 46:
         return jjStopAtPos(0, 104);
      case 47:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0xa0L, 0x200L);
      case 58:
         return jjStopAtPos(0, 64);
      case 59:
         return jjStopAtPos(0, 66);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x28002000L);
      case 61:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 62:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x50001000L);
      case 64:
         return jjStopAtPos(0, 54);
      case 91:
         return jjStopAtPos(0, 69);
      case 93:
         return jjStopAtPos(0, 70);
      case 94:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x60000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000001000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10020002000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x880000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2010000c00000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4000103c0000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1040004000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x803c000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 12);
      case 124:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x48000L);
      case 125:
         return jjStopAtPos(0, 13);
      case 126:
         return jjStopAtPos(0, 102);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 0);
         break;
      case 43:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 45:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 49:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000L, active1, 0L);
      case 51:
         return jjMoveStringLiteralDfa2_0(active0, 0x510000L, active1, 0L);
      case 54:
         return jjMoveStringLiteralDfa2_0(active0, 0xa20000L, active1, 0L);
      case 56:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 53);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 53);
         break;
      case 60:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 61:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 62:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 20);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000002000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 20);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000001000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8200040000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40004000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100020000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 124:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 53);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 53);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 53);
         break;
      case 52:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 53);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 53);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 53);
         break;
      case 54:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 53);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 53);
         break;
      case 61:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(2, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(2, 77);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20002000000L, active1, 0L);
      case 98:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 20);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x5200018000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x40044000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000020000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000040000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 20);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 20);
         break;
      case 111:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 20);
         break;
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 20);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x11000000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20040000000000L);
      case 118:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 20);
         break;
      case 122:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1040000000000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 20);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 20);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 107:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 20);
         break;
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 20);
         break;
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 20);
         break;
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 52;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAdd(5); }
                  }
                  break;
               case 13:
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(20); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(5, 7); }
                  else if (curChar == 39)
                     { jjAddStates(8, 9); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 48)
                     { jjAddStates(10, 11); }
                  if (curChar == 48)
                     { jjCheckNAdd(10); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAdd(5); }
                  }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAdd(5); }
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAdd(5); }
                  break;
               case 9:
                  if (curChar == 48)
                     { jjCheckNAdd(10); }
                  break;
               case 10:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(10); }
                  break;
               case 21:
                  if (curChar == 39)
                     { jjAddStates(8, 9); }
                  break;
               case 22:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if (curChar == 39 && kind > 57)
                     kind = 57;
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 23); }
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  break;
               case 30:
                  if (curChar == 34)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 31:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 33:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 34:
                  if (curChar == 34 && kind > 58)
                     kind = 58;
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 15); }
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 37:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(36); }
                  break;
               case 39:
                  if (curChar == 48)
                     { jjAddStates(10, 11); }
                  break;
               case 41:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 47:
                  if (curChar == 46)
                     { jjCheckNAdd(48); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAdd(48); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 50:
                  if (curChar == 46)
                     { jjCheckNAdd(51); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAdd(51); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(20); }
                  }
                  if (curChar == 122)
                     { jjCheckNAdd(5); }
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(20); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x20024000000000L & l) != 0L)
                     { jjCheckNAdd(5); }
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 105)
                     { jjCheckNAdd(6); }
                  else if (curChar == 117)
                     { jjCheckNAdd(6); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(20); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 53:
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(20); }
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if ((0x20024000000000L & l) != 0L)
                     { jjCheckNAdd(5); }
                  break;
               case 6:
                  if (curChar == 122)
                     { jjCheckNAdd(5); }
                  break;
               case 7:
                  if (curChar == 117)
                     { jjCheckNAdd(6); }
                  break;
               case 8:
                  if (curChar == 105)
                     { jjCheckNAdd(6); }
                  break;
               case 11:
                  if (curChar == 101 && kind > 39)
                     kind = 39;
                  break;
               case 12:
                  if (curChar == 117)
                     { jjCheckNAdd(11); }
                  break;
               case 14:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     { jjCheckNAdd(11); }
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(20); }
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 24:
                  if (curChar == 92)
                     { jjAddStates(16, 18); }
                  break;
               case 25:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 31:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 32:
                  if (curChar == 92)
                     { jjAddStates(19, 21); }
                  break;
               case 33:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 40:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if (curChar == 120)
                     { jjCheckNAdd(43); }
                  break;
               case 43:
                  if ((0x7fffffe0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(43); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(5, 7); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 52 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(4, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAddStates(22, 24); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 8;
                  { jjCheckNAddStates(22, 24); }
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 2:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  kind = 8;
                  { jjCheckNAddStates(22, 24); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddStates(22, 24); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   45, 46, 47, 49, 50, 31, 32, 34, 22, 24, 40, 42, 31, 32, 36, 34, 
   25, 26, 28, 33, 35, 37, 0, 1, 3, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, "\173", 
"\175", "\165\70", "\165\61\66", "\165\63\62", "\165\66\64", "\151\70", "\151\61\66", 
"\151\63\62", "\151\66\64", "\146\63\62", "\146\66\64", "\142\157\157\154", 
"\143\150\141\162", "\163\164\162\151\156\147", "\165\163\151\172\145", "\151\163\151\172\145", 
"\141\165\164\157", "\141\162\162\141\171", "\164\171\160\145", null, null, null, null, null, null, 
null, null, "\146\156", "\143\154\141\163\163", "\163\164\162\165\143\164", 
"\145\156\165\155", "\160\165\142", "\160\162\151\166", "\151\146", "\145\154\163\145", 
"\163\167\151\164\143\150", "\146\157\162", "\167\150\151\154\145", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\162\145\164\165\162\156", "\100", "\156\145\167", null, null, null, null, 
null, null, null, null, "\72", "\54", "\73", "\50", "\51", "\133", "\135", "\75", 
"\52\75", "\57\75", "\53\75", "\55\75", "\76\76\75", "\74\74\75", "\46\75", "\174\75", 
"\136\75", "\45\75", "\174\174", "\46\46", "\174", "\136", "\46", "\75\75", "\41\75", 
"\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", "\53", "\55", "\52", "\57", 
"\45", "\53\53", "\55\55", "\176", "\41", "\56", "\55\76", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 8;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 11))
         {
            jjmatchedKind = 11;
            jjmatchedPos = 0;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                             input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ScriptlangParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ScriptlangParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 52; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7fffffffffff001L, 0x3ffffffffffL, 
};
static final long[] jjtoSkip = {
   0x71eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x700L, 0x0L, 
};
static final long[] jjtoMore = {
   0x8e0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[52];
    private final int[] jjstateSet = new int[2 * 52];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
