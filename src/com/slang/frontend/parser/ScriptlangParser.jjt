/**----------------**/
/** Parser options **/
/**----------------**/
options {
	LOOKAHEAD              = 1;
	CHOICE_AMBIGUITY_CHECK = 2;
	OTHER_AMBIGUITY_CHECK  = 1;
	STATIC                 = false;
	DEBUG_PARSER           = false;
	DEBUG_LOOKAHEAD        = false;
	DEBUG_TOKEN_MANAGER    = false;
	ERROR_REPORTING        = true;
	JAVA_UNICODE_ESCAPE    = true;
	UNICODE_INPUT          = true;
	IGNORE_CASE            = false;
	USER_TOKEN_MANAGER     = false;
	USER_CHAR_STREAM       = false;
	BUILD_PARSER           = true;
	BUILD_TOKEN_MANAGER    = true;
	SANITY_CHECK           = true;
	FORCE_LA_CHECK         = false;
	MULTI                  = true;
	NODE_EXTENDS           = "NodeSetter";
	TRACK_TOKENS           = true;
}

PARSER_BEGIN(ScriptlangParser) /** ScriptLangParser Class - BEGIN **/
package com.slang.frontend.parser;

import com.slang.utils.*;
import com.slang.frontend.parser.nodes.Node_Type.*;
import com.slang.frontend.parser.nodes.Node_Literal.*;
import com.slang.frontend.parser.nodes.Node_Expression.ExpressionType;

public class ScriptlangParser {
    /** Get the root node of the AST **/
    public Node rootNode() {
    	return jjtree.rootNode();
    }
}

PARSER_END(ScriptlangParser) /** ScriptLangParser Class - END **/

/**--------------------**/
/** Token declarations **/
/**--------------------**/
SKIP :
{
	" " | "\t" | "\n" | "\r"
}

/**----------**/
/** COMMENTS **/
/**----------**/
MORE :
{
	"//" : IN_SINGLE_LINE_COMMENT
|	<"/**" ~[ "/" ]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|	"/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT: ( ~[ "\n", "\r" ] )* ( "\n" | "\r" | "\r\n" )?> : DEFAULT
}

<IN_FORMAL_COMMENT> SPECIAL_TOKEN :
{
	<FORMAL_COMMENT: "*/"> : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{
	<MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT> MORE :
{
	<~[]>
}

TOKEN : /**** IMPORTANT: !! DO NOT CHANGE THE TOKEN DECLARATION ORDER !! ****/
{
	/* Block unit tokens */
	<LBRACE: "{">
|	<RBRACE: "}">

	/* Primitive data types */
|	<U8:     "u8"    >
|	<U16:    "u16"   >
|	<U32:    "u32"   >
|	<U64:    "u64"   >
|	<I8:     "i8"    >
|	<I16:    "i16"   >
|	<I32:    "i32"   >
|	<I64:    "i64"   >
|	<F32:    "f32"   >
|	<F64:    "f64"   >
|	<BOOL:   "bool"  >
|	<CHAR:   "char"  >
|	<STRING: "string">
|	<USIZE:  "usize" >
|	<ISIZE:  "isize" >
|	<ARRAY:  "array" >
|	<AUTO:   "auto"  >
|	<TYPE:   "type"  >
|	<MOD:    "module">
|   <LITERAL_SUFFIX: ("i" | "u" | "f" | "uz" | "iz") (<DIGIT_DEC>)+>

	/* Literals */
|	<LITERAL_INT_BIN: "0b" (<DIGIT_BIN>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_INT_OCT: "0" (<DIGIT_OCT>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_INT_DEC: (<DIGIT_DEC>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_INT_HEX: "0x" (<DIGIT_HEX>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_FLOAT32: (<DIGIT_DEC>)+ "." (<DIGIT_DEC>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_FLOAT64: (<DIGIT_DEC>)+ "." (<DIGIT_DEC>)+ (<LITERAL_SUFFIX>)?>
|	<LITERAL_BOOL:    ("true" | "false")>

	/* Keywords */
|	<FN:       "fn"       > /* Return type void for function declaration                            */
|	<CLASS:    "class"    > /* Class declaration                                                    */
|	<STRUCT:   "struct"   > /* Struct declaration                                                   */
|	<ENUM:     "enum"     > /* Enum declaration                                                     */
|	<PUB:      "public"   > /* Public modifier                                                      */
|	<PRIV:     "private"  > /* Private modifier                                                     */
|	<PROT:     "protected"> /* Protected modifier                                                   */
|	<IF:       "if"       > /* Start of an if statement                                             */
|	<ELSE:     "else"     > /* Start of an else branch of an if statement                           */
|	<SWITCH:   "switch"   > /* Start of a switch statement                                          */
|	<FOR:      "for"      > /* Start of a for loop statement                                        */
|	<WHILE:    "while"    > /* Start of a while loop statement                                      */
|	<BREAK:    "break"    > /* Break out of a loop                                                  */
|	<CONTINUE: "continue" > /* Jump to the next loop cycle                                          */
|	<RETURN:   "return"   > /* Return from a block unit                                             */
|	<BIND:     "@"        > /* Binds an identifier to a pattern (could be an anonymous bind)        */
|	<NEW:      "new"      > /* Instantiate an object on the heap / fork a new thread                */
|	<UNSAFE:   "unsafe"   > /* Creates a block that deals with pointers and global static variables */

	/* Identifiers */
|	<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT_BIN> | <DIGIT_OCT> | <DIGIT_DEC> | <DIGIT_HEX>)*>
|	<CHARACTER_LITERAL:
		"'"
		( (~["'","\\","\n","\r"]) |
			("\\"
				( ["n","t","b","r","f","\\","'","\""] |
				  ["0"-"7"] ( ["0"-"7"] )? |
				  ["0"-"3"] ["0"-"7"] ["0"-"7"]
				)
			)
		)
		"'">
|	<STRING_LITERAL:
		"\""
		( (~["\"","\\","\n","\r"]) |
			("\\"
				( ["n","t","b","r","f","\\","'","\""] |
				  ["0"-"7"] ( ["0"-"7"] )? |
				  ["0"-"3"] ["0"-"7"] ["0"-"7"]
				)
			)
		)*
		"\"">
|	<#LETTER:    ["a"-"z", "A"-"Z", "_", "\\"]>
|	<#DIGIT_BIN: ["0"-"1"]>
|	<#DIGIT_OCT: ["0"-"7"]>
|	<#DIGIT_DEC: ["0"-"9"]>
|	<#DIGIT_HEX: ["0"-"9", "a"-"z", "A"-"F"]>
}

/***********************************************************
 * THE SCRIPTLANG PROGRAMMING LANGUAGE GRAMMAR STARTS HERE *
 ***********************************************************/

/**-----------------**/
/** Root production **/
/**-----------------**/
void _Root() : {}
{
	( _All() )* <EOF>
}

void _All() #void : {} /* Matches any kind of top level construct */
{
	/* A label (optional) with an (optional) access modifier for the actual top level module */
	LOOKAHEAD(3) ( ( _Type_Access_Modifier(jjtn001) )? ( _Identifier() )? ) #_Label() ":"
	
	/* A block unit -> {...} */
|	LOOKAHEAD(5) _BlockUnit()

	/* Declarations -> lambdas, functions, variables/objects, classes, structs, enums */
|	LOOKAHEAD(10) _Declaration()

	/* Statements -> if, switch, for, while */
|	LOOKAHEAD(2) _Statement()                           
}

/**-------------------------**/
/** Higher level constructs **/
/**-------------------------**/
void _BlockUnit() #void : {} /* Also known as an independent Compilation Unit / Module */
{
	/* A threaded block unit */
	LOOKAHEAD(3) ( ( _Type_Access_Modifier(jjtn001) #_Type() )? <NEW> ( _Identifier() )? ( _Declaration_Array() )? <LBRACE> ( _All() )* <RBRACE> ) #_BlockUnit_Thread()
	
	/* An unsafe threaded block unit */
| 	LOOKAHEAD(3) ( ( _Type_Access_Modifier(jjtn003) #_Type() )? <NEW> <UNSAFE> ( _Identifier() )? ( _Declaration_Array() )? <LBRACE> ( _All() )* <RBRACE> ) #_BlockUnit_Thread_Unsafe()

	/* A normal block unit */
|	LOOKAHEAD(3) ( ( ( _Type_Access_Modifier(jjtn005) #_Type() )? _Identifier() )? ( _Declaration_Array() )? <LBRACE> ( _All() )* <RBRACE> ) #_BlockUnit()				

	/* An unsafe normal block unit */
|	( ( _Type_Access_Modifier(jjtn007) #_Type() )? <UNSAFE> ( _Identifier() )? ( _Declaration_Array() )? <LBRACE> ( _All() )* <RBRACE> ) #_BlockUnit_Unsafe()				
}

void _Statement() #void : {} /* Any kind of statement goes here */
{
	";" #_Statement_Empty()              /* Just a semicolon                           */
|	LOOKAHEAD(3) _Statement_Switch()     /* Switch statement                           */
|	LOOKAHEAD(3) _Statement_If()         /* If statement                               */
|	LOOKAHEAD(3) _Statement_For()        /* For statement                              */
|	LOOKAHEAD(3) _Statement_While()      /* While statement                            */
|	LOOKAHEAD(3) _Statement_Flow() ";"   /* A statement that disturbs the program flow */
|	LOOKAHEAD(2) _Statement_Expression() /* Assignment statement                       */		
}

void _Declaration() #void : {} /* Any kind of declaration goes here */
{
	LOOKAHEAD(5000) _Declaration_Function() /* Functions                       */
|	LOOKAHEAD(2) ( _Declaration_Object()    /* Variables/Class objects/Lambdas */
		( LOOKAHEAD(2) ";" #_Terminator() )? ) #_Declaration_Object() 
|	LOOKAHEAD(2) _Declaration_Class() ";"   /* Classes                         */
|	LOOKAHEAD(2) _Declaration_Struct() ";"  /* Structures                      */
|	_Declaration_Enum() ";"                 /* Enumerators                     */
}

/**----------------------------------**/
/** Lower level *generic* constructs **/
/**----------------------------------**/
void _Declaration_Object() #void : {} /* Variable object declaration: <type> <objlist> */
{
	_Type() ( _Declaration_Object_List() ) #_Declaration_Object_List()
}

void _Declaration_Object_Type_Postfix(SimpleNode n) #void : {} /* Object type postfix declaration: <array>|<slice> */
{
	LOOKAHEAD(3) _Declaration_Array()
	{
		n.setType(null, TypeModifier.ARRAYUNIQUE, null);
	}
|	_Declaration_Array_Slice()
	{
		n.setType(null, TypeModifier.ARRAYSLICE, null);
	}
}

void _Declaration_Object_List() #void : {} /* Variable / Object declaration list: (<identifier> ((<paramlist>))? <postfix>? <assignment>?)* */
{
	( _Identifier()
	/* The following line transforms the object into a lambda object (aka function pointer) */
	( LOOKAHEAD(2) ( "(" ( _Declaration_Parameter_List() )? ")" ) #_Declaration_Function_Lambda() )?
	( LOOKAHEAD(2) _Declaration_Object_Type_Postfix(jjtn002) #_Type() )*
	( LOOKAHEAD(3) _Assignment() )? ) #_Declaration_Object_Single()
			
	( LOOKAHEAD(2) ","
		( _Identifier()
		/* The following line transforms the object into a lambda object (aka function pointer) */
		( LOOKAHEAD(2) ( "(" ( _Declaration_Parameter_List() )? ")" ) #_Declaration_Function_Lambda() )?
		( LOOKAHEAD(2) _Declaration_Object_Type_Postfix(jjtn003) #_Type() )*
		( LOOKAHEAD(3) _Assignment() )? ) #_Declaration_Object_Single()
	)*
}

void _Declaration_Function() : {} /* Function declaration: <type>? <IDENTIFIER> (<paramlist>?) <blockunit> */
{
	( LOOKAHEAD(2) _Type() )? _Identifier() "(" ( _Declaration_Parameter_List() )? ")" _BlockUnit()
}

void _Declaration_Function_Lambda_Enum() #_Declaration_Function_Lambda() : {}
{	
	/* Lambdas declared inside enums: <type> <IDENTIFIER> (<paramlist>)? <assignment>? <objlist> */
	_Type()
	( _Identifier() )? "(" ( _Declaration_Parameter_List() )? ")"
	( LOOKAHEAD(3) _Assignment() )?
}

void _Declaration_Struct() : {} /* Struct declaration: <modif>? struct <IDENTIFIER> { <declaration>* } */
{
	( _Type_Access_Modifier(jjtn001) #_Type() )?
	<STRUCT> _Identifier() "{" ( _Declaration() )* "}"
}

void _Declaration_Class() : {} /* Class declaration: <modif>? class <IDENTIFIER> ( : (<modif>? <IDENTIFIER> , ...)+ )? <blockunit> */
{
	( _Type_Access_Modifier(jjtn001) #_Type() )?
	<CLASS> _Identifier()
		( ":"
			( LOOKAHEAD(2)
				( _Type_Access_Modifier(jjtn002) #_Type() )?
				_Identifier() ( "," )?
			)+ #_Declaration_Class_Inheritance()
		)?	
	_BlockUnit()
}

void _Declaration_Enum() : {} /* Enum declaration: <modif>? enum <IDENTIFIER>? { <enumbodylist>? } */
{
	( _Type_Access_Modifier(jjtn001) #_Type() )?
	<ENUM> ( _Identifier() )? "{" ( _Declaration_EnumBody_List() )? "}"
}

void _Declaration_EnumBody_List() #void : {} /* Enum body list declaration */
{
	_Declaration_EnumBody() ( LOOKAHEAD(2) "," _Declaration_EnumBody() )* ( "," )?
}

void _Declaration_EnumBody() #void : {} /* Enum body declaration: <tuple> | <struct> | <enumconstlist> | <function> */
{
	/* An enum can have ... */
	LOOKAHEAD(3) _Declaration_EnumBody_Tuple()  /* A named tuple (or anonymous) with types and expressions as arguments */
|	LOOKAHEAD(3) _Declaration_EnumBody_Struct() /* A struct declaration inside an enum                                  */
|	_Declaration_EnumBody_Struct_Bodyless()     /* A struct without a body inside an enum                               */
|	LOOKAHEAD(3) _Declaration_EnumBody_Const()  /* A constant identifier                                                */
|	_Declaration_Function_Lambda_Enum()         /* A function, which acts as a lambda                                   */
}

void _Declaration_EnumBody_Const() : {} /* Enum body const declaration: <IDENTIFIER> <assignment>? */
{
	_Identifier() ( LOOKAHEAD(2) _Assignment() )?
}

void _Declaration_EnumBody_Struct() : {} /* Enum body struct declaration: <struct>? <IDENTIFIER> { <declaration>* } */
{
	( <STRUCT> )? _Identifier() "{" ( _Declaration() )* "}"
}

void _Declaration_EnumBody_Struct_Bodyless() #_Declaration_EnumBody_Struct() : {} /* Enum body struct declaration: <struct> <IDENTIFIER> */
{
	<STRUCT> _Identifier()
}

void _Declaration_EnumBody_Tuple() : {} /* Enum body tuple declaration: <IDENTIFIER>? ( ((<expression>|<type>),?)+ ) */
{
	( _Identifier() )? "(" ( ( LOOKAHEAD(3) _Expression() | _Type() ) #_Declaration_EnumBody_Tuple_Arg() ( "," )? )+ ")"
}

void _Declaration_Bind() : {} /* Bind declaration: <IDENTIFIER>? @ | [<IDENTIFIER>,? <IDENTIFIER>,? ...] @ */
{
	( _Identifier() )? <BIND>
|	"[" ( ( LOOKAHEAD(2) _Identifier() | _Declaration_Bind() ) ( "," )? )+ "]" <BIND>
}

void _Declaration_Parameter_List() : {} /* Parameter list declaration: <typeparam>, (, <typeparam>)* */
{
	_Declaration_Parameter_Single() ( "," _Declaration_Parameter_Single() )*
}

void _Declaration_Parameter_Single() : {} /* Declaration of a single function argument: <type> <IDENTIFIER> */
{
	_Type() ( LOOKAHEAD(2) _Identifier() )?
}

void _Declaration_Parameter_Caller_List() : {} /* Parameter list declaration: ( <expression> (,<expression>)* )? */
{
	( _Expression() #_Declaration_Parameter_Caller_Single() ( "," _Expression() #_Declaration_Parameter_Caller_Single() )* )?
}

void _Declaration_Array() #void : {} /* Declaration array: [ ( <expression> (,<expression>?)* )? ] */
{
	"[" ( LOOKAHEAD(2) ( _Expression() #_Expression() ) #_Declaration_Array_Arg() ( "," ( _Expression() #_Expression() ) #_Declaration_Array_Arg() )* )? #_Declaration_Array() "]"
}

void _Declaration_Array_Slice() : {} /* Declaration array with slice notation: [ <expression>? (:<expression>?(:<expression>?)?)? ] */
{
	"[" ( _Expression() )? #_Declaration_Array_Slice_Start() 
		(
				":" ( _Expression() )? #_Declaration_Array_Slice_End()
			(
				":" ( _Expression() )? #_Declaration_Array_Slice_Skip()
			)?
		)?
	"]"
}

void _Declaration_Tuple() : {} /* An expression wrapped with (): ( <expression> (,<expression>)* )? */
{
	( LOOKAHEAD(2) ( _Expression() #_Expression() ) #_Declaration_Tuple_Arg() ( "," ( _Expression() #_Expression() ) #_Declaration_Tuple_Arg() )* )?
}

void _Expression() #void : {} /* Expression: <blockunit> | <cascaded_expression> | <prim_expr> <assignment> */
{
	LOOKAHEAD(5000) _BlockUnit()
|	LOOKAHEAD(3) _Expression_Conditional()
|	_Expression_Primary() _Assignment()
}

void _Assignment() : {} /* Assignment: <prim_expr>? <assign_operation> <expr> */
{
	( LOOKAHEAD(2) _Expression_Primary() )? _Assignment_Operation() _Expression() #_Expression()
}

void _Assignment_Operation() : /* Assignment operation. It's self explanatory. */
{ Token t; }
{
	( t="=" | t="*=" | t="/=" | t="+=" | t="-=" | t=">>=" | t="<<=" | t="&=" | t="|=" | t="^=" | t="%=" )
	{
		jjtThis.setIdentifier(t.image);
	}
}

void _Identifier() : /* An identifier. Used for identifying just about anything (variables, functions, etc). */
{ Token t; }
{
	t = <IDENTIFIER>
	{
		jjtThis.setIdentifier(t.image);
	}
}

void _Literal() : /* Literal constants (signed/unsigned integer, float, boolean, char and string) */
{ Token t; }
{
	( t = <LITERAL_INT_BIN>   { jjtThis.setLiteral(t.image, LiteralType.INT_BIN); } | /* Binary integer      */
	  t = <LITERAL_INT_OCT>   { jjtThis.setLiteral(t.image, LiteralType.INT_OCT); } | /* Octal integer       */
	  t = <LITERAL_INT_DEC>   { jjtThis.setLiteral(t.image, LiteralType.INT_DEC); } | /* Decimal integer     */
	  t = <LITERAL_INT_HEX>   { jjtThis.setLiteral(t.image, LiteralType.INT_HEX); } | /* Hexadecimal integer */
	  t = <LITERAL_FLOAT32>   { jjtThis.setLiteral(t.image, LiteralType.FLOAT32); } | /* 32-bit float        */
	  t = <LITERAL_FLOAT64>   { jjtThis.setLiteral(t.image, LiteralType.FLOAT64); } | /* 64-bit float        */
	  t = <LITERAL_BOOL>      { jjtThis.setLiteral(t.image, LiteralType.BOOL);    } | /* Boolean             */
	  t = <CHARACTER_LITERAL> { jjtThis.setLiteral(t.image, LiteralType.CHAR);    } | /* Character           */
	  t = <STRING_LITERAL>    { jjtThis.setLiteral(t.image, LiteralType.STRING);  } ) /* String              */

	/* A type suffix */
	( LOOKAHEAD(2) _Literal_Primitive_Suffix_Custom() )?
}

void _Literal_Primitive_Suffix_Custom() : /* Supported native data type suffixes */
{ Token t; }
{
	/* A custom suffix. Examples: u1, i48, u1024, sz2048 */
	( t = <LITERAL_SUFFIX> | t = <IDENTIFIER> )
	{
		jjtThis.setType(t.image, null, TypeModifier.RESIZED, null);
	}
}

/********************************************
*********************************************
** Lower level *specialised* constructs *****
*********************************************
*********************************************/

/**-------------**/
/** Expressions **/
/**-------------**/

/** (The following
 *   productions cascade until the 
 *   '_Expression_Primary' production). **/

void _Expression_Conditional() #void : {}
{
	LOOKAHEAD(20) ( "(" _Expression_CondOr() #_Expression() ")" "?"
		_Expression() #_Expression_Conditional_If_True() ":"
		_Expression_Conditional() #_Expression_Conditional_If_False() )
	{
		jjtn001.setExpr("COND", ExpressionType.COND);
	}
|	_Expression_CondOr()
}

void _Expression_CondOr() #void : {}
{
	_Expression_CondAnd() ( LOOKAHEAD(2) "||" _Expression_CondAnd() #_Expression() { jjtn001.setExpr("||", ExpressionType.CONDOR); } )*
}

void _Expression_CondAnd() #void : {}
{
	_Expression_IncOr() ( LOOKAHEAD(2) "&&" _Expression_IncOr() #_Expression() { jjtn001.setExpr("&&", ExpressionType.CONDAND); } )*
}

void _Expression_IncOr() #void : {}
{
	_Expression_ExOr() ( LOOKAHEAD(2) "|" _Expression_ExOr() #_Expression() { jjtn001.setExpr("|", ExpressionType.INCOR); } )*
}

void _Expression_ExOr() #void : {}
{
	_Expression_And() ( LOOKAHEAD(2) "^" _Expression_And() #_Expression() { jjtn001.setExpr("^", ExpressionType.EXOR); } )*
}

void _Expression_And() #void : {}
{
	_Expression_Equal() ( LOOKAHEAD(2) "&" _Expression_Equal() #_Expression() { jjtn001.setExpr("&", ExpressionType.AND); } )*
}

void _Expression_Equal() #void : {}
{
	_Expression_Relational()
	( LOOKAHEAD(2)
	  ( "==" _Expression_Relational() #_Expression() { jjtn001.setExpr("==", ExpressionType.EQUAL); } |
        "!=" _Expression_Relational() #_Expression() { jjtn002.setExpr("!=", ExpressionType.EQUAL); } ) )*
}

void _Expression_Relational() #void : {}
{
	_Expression_Shift() 
	( LOOKAHEAD(2)
	  ( "<"  _Expression_Shift() #_Expression() { jjtn001.setExpr("<",  ExpressionType.REL); } | 
	    ">"  _Expression_Shift() #_Expression() { jjtn002.setExpr(">",  ExpressionType.REL); } | 
	    "<=" _Expression_Shift() #_Expression() { jjtn003.setExpr("<=", ExpressionType.REL); } | 
	    ">=" _Expression_Shift() #_Expression() { jjtn004.setExpr(">=", ExpressionType.REL); } ) )*
}

void _Expression_Shift() #void : {}
{
	_Expression_Additive() 
	( LOOKAHEAD(2)
	  ( "<<"  _Expression_Additive() #_Expression() { jjtn001.setExpr("<<",  ExpressionType.SHT); } | 
	    ">>"  _Expression_Additive() #_Expression() { jjtn002.setExpr(">>",  ExpressionType.SHT); } ) )*
}

void _Expression_Additive() #void : {}
{
	_Expression_Multiplicative()
	( LOOKAHEAD(2)
	  ( "+" _Expression_Multiplicative() #_Expression() { jjtn001.setExpr("+",  ExpressionType.ADD); } |
        "-" _Expression_Multiplicative() #_Expression() { jjtn002.setExpr("-",  ExpressionType.ADD); } ) )*
}

void _Expression_Multiplicative() #void : {}
{
	_Expression_Cast()
	( LOOKAHEAD(2)
	  ( "*" _Expression_Cast() #_Expression() { jjtn001.setExpr("*",  ExpressionType.MUL); } |
        "/" _Expression_Cast() #_Expression() { jjtn002.setExpr("/",  ExpressionType.MUL); } |
	    "%" _Expression_Cast() #_Expression() { jjtn003.setExpr("%",  ExpressionType.MUL); } ) )*
}

void _Expression_Cast() #void : {}
{
	LOOKAHEAD(3) ( "(" ( LOOKAHEAD(2) _Type() | _Literal_Primitive_Suffix_Custom() ) ")" 
		( LOOKAHEAD(2) _Expression_Unary() )? ) #_Expression()
	{
		jjtn001.setExpr("CAST", ExpressionType.CAST);
	} 
|	_Expression_Unary()
}

void _Expression_Unary() #void : {}
{
	"++" _Expression_Unary() #_Expression() { jjtn001.setExpr("++", ExpressionType.UNARY); }
|	"--" _Expression_Unary() #_Expression() { jjtn002.setExpr("--", ExpressionType.UNARY); }
|	"~"  _Expression_Unary() #_Expression() { jjtn003.setExpr("~",  ExpressionType.UNARY); }
|	"!"  _Expression_Unary() #_Expression() { jjtn004.setExpr("!",  ExpressionType.UNARY); }
|	"+"  _Expression_Unary() #_Expression() { jjtn005.setExpr("+",  ExpressionType.UNARY); }
|	"-"  _Expression_Unary() #_Expression() { jjtn006.setExpr("-",  ExpressionType.UNARY); }
|	"*"  _Expression_Unary() #_Expression() { jjtn007.setExpr("*",  ExpressionType.UNARY); }
|	"&"  _Expression_Unary() #_Expression() { jjtn008.setExpr("&",  ExpressionType.UNARY); }
|	_Expression_Postfix()
}

void _Expression_Postfix() #void :
{ Token t = null, t2 = null; }
{
	_Expression_Primary()

	( LOOKAHEAD(2)
		(
			/* Array */
			LOOKAHEAD(3) _Declaration_Array()
			|
			/* Array Slice */
			_Declaration_Array_Slice()
			|
			/* Calling function syntax */	
			(		
				t = "(" _Declaration_Parameter_Caller_List() t2 = ")"
				
				| t = "--"               /* Decrementing             */
				| t = "++"               /* Incrementing             */
				| t = "."  _Identifier() /* Accessing member         */
				| t = "->" _Identifier() /* Accessing pointer member */
			) #_Expression()
			{
				jjtn001.setExpr( t.image + (t2 != null ? t2.image : ""), ExpressionType.POST);
				t = t2 = null;
			}
		)
	)*		
}

void _Expression_Primary() #void : {}
{
	/* A primary expression can be ... */
	LOOKAHEAD(2) _Identifier()                /* An identifier                            */
|	LOOKAHEAD(2) _Literal()                   /* A literal                                */
|	LOOKAHEAD(9) "(" _Expression() ")"        /* An expression wrapped around parenthesis */
|	LOOKAHEAD(3) "(" _Declaration_Tuple() ")" /* A tuple                                  */
|	LOOKAHEAD(3) _Declaration_Array()         /* An array                                 */
|	LOOKAHEAD(3) _Declaration_Array_Slice()   /* A slice of an array                      */
|	LOOKAHEAD(2) _Type()                      /* A variable type                          */
|	LOOKAHEAD(2) _BlockUnit()                 /* A whole block unit                       */
|	LOOKAHEAD(2) _Statement_If()              /* An if statement                          */
|	LOOKAHEAD(2) _Statement_Switch()          /* A switch statement                       */
|	LOOKAHEAD(2) _Statement_For()             /* A for statement                          */
|	LOOKAHEAD(2) _Statement_While()           /* A while statement                        */
}

/**------------**/
/** Statements **/
/**------------**/
void _Statement_Expression() : /* Statement expression: <expression> <assignment>* ;? */
{ Token t = null; }
{
	_Expression() #_Expression() ( LOOKAHEAD(2) _Assignment() )* ( LOOKAHEAD(2) t = ";" #_Terminator() )?
	{
		jjtn001.setExpr(Utils.NULLSTR, ExpressionType.BLOB, (t == null));
	}
}

void _Statement_If() : {} /* If statement: if ( <expression> ) (<blockunit>|<all>) (else (<blockunit>|<all>))? */
{
	<IF> "(" _Expression() #_Expression() ")" ( LOOKAHEAD(3) _BlockUnit() | _All() ) #_Statement_If_True()
	( LOOKAHEAD(2) <ELSE> ( LOOKAHEAD(3) _BlockUnit() | _All() ) #_Statement_If_False() )?
}

void _Statement_Switch() : {} /* Switch statement: switch ( ( <match>,? )+ ) { <switchline>+ } */
{
	<SWITCH> "(" ( _Expression() #_Expression() ( "," _Expression() #_Expression() )* ) #_Statement_Switch_Match_List() ")"
	"{" ( LOOKAHEAD(2) _Statement_Switch_Line() ( "," )? )+ #_Statement_Switch_Line_List() "}"
}

void _Statement_Switch_Line() : {} /* A whole switch line: @(else|(<expression>(,<expression>)*)? ) : (<blockunit>|<switchmatchbody>+) */
{
	/* Switch condition list of a single switch line */
	( _Declaration_Bind() ( <ELSE> | ( _Expression() #_Expression() ( "," _Expression() #_Expression() )* )? ) ) #_Statement_Switch_Match_List() ":"
	
	/* Switch body list of a single switch line */
	( LOOKAHEAD(3)
		_BlockUnit() #_Statement_Switch_Line_Body_List()
		|
		( LOOKAHEAD(2) _Statement_Switch_Line_Body_Single() )+ #_Statement_Switch_Line_Body_List()
	)
}

void _Statement_Switch_Line_Body_Single() #void : /* The body of a single switch line */
{ Token t = null; }
{	
	/* Declarations -> variables, functions, classes, structs, enums */
	LOOKAHEAD(5) _Declaration()

	/* A returnable and NON-returnable expression -> a + 1 + 2 + 3 + b  !OR!  a + 1 + 2 + 3 + b; */
|	LOOKAHEAD(3) ( _Expression() ( LOOKAHEAD(2) t = ";" #_Terminator() )? ) #_Expression()
	{
		jjtn002.setExpr(Utils.NULLSTR, ExpressionType.BLOB, (t == null));
	}

	/* Statements -> if, switch, for, while */
|	LOOKAHEAD(3) _Statement()
}

void _Statement_For() : {} /* For statement: for (<declvar> : <expression> | (<declvar>,?)*;<expression>?;<expression>?) (<blockunit>|<all>|;) */
{
	<FOR> "("

		( LOOKAHEAD(7)
			/** Foreach declaration **/
			( _Declaration_Object() #_Declaration_Object() ) #_Statement_Foreach_InitBranch() ":" _Expression() #_Expression()

			| /** or ... **/
			
			/** Normal For declaration        **/
			/* For loop initialization branch  */
			( ( LOOKAHEAD(3) ( _Declaration_Object() #_Declaration_Object() ) | _Assignment() )
				( "," ( LOOKAHEAD(3) ( _Declaration_Object() #_Declaration_Object() ) | _Assignment() ) )* )? #_Statement_For_InitBranch() ";"

			/* For loop condition branch */
			( _Expression() #_Expression() )? ";"

			/* For iteration branch */
			( _Expression() #_Expression() ( "," _Expression() #_Expression() )* )? #_Statement_For_IterateBranch() 

		) ")"

	/* For loop body */
	( LOOKAHEAD(3) _BlockUnit() | _All() ) #_Statement_For_BodyBranch()
}

void _Statement_While() : {} /* While statement: while ( <expression> ) (<blockunit>|<all>|;) */
{
	<WHILE> "(" _Expression() #_Expression() ")" ( LOOKAHEAD(3) _BlockUnit() | _All() ) #_Statement_While_BodyBranch()
}

void _Statement_Flow() #void : /* A statement that disrupts the normal flow of the program. */
{ Token t; }
{
	( t=<CONTINUE> | t=<BREAK> | t=<RETURN> ) ( LOOKAHEAD(2) _Expression() )? #_Statement_Flow()
	{
		jjtn001.setIdentifier(t.image);
	}
|	"(" ( _Statement_Flow() )+ ")"
}

/**-------**/
/** Types **/
/**-------**/
SimpleNode _Type() : /* All primitive data types are declared here: <modif>? <tuple>|<classname>|<type> <unaryop>* */
{ Token t = null; }
{
	(
		/* Check for access modifier */
		( _Type_Access_Modifier(jjtThis) )?
	
		(
			/* Is this type a tuple? */
			_Type_Tuple(jjtThis)
			
			/* A Class/Struct? */
		|	_Type_ClassStruct(jjtThis)
		
			/* Or perhaps a primitive data type? */
		|	( t=<U8>     | t=<U16>   | t=<U32>  | t=<U64>   |
			  t=<I8>     | t=<I16>   | t=<I32>  | t=<I64>   |
			  t=<F32>    | t=<F64>   | t=<BOOL> | t=<CHAR>  |
			  t=<STRING> | t=<USIZE> | t=<ISIZE>| t=<ARRAY> |
			  t=<AUTO>   | t=<TYPE>  | t=<MOD>  | <FN> )
			{
				jjtThis.setType(t != null ? TypePrimitive.values()[t.kind - U8 + 1] : TypePrimitive.VOIDFN, null, null);
			}
		)
		
		/* And what data type modifiers do we have? */
		( LOOKAHEAD(2) _Type_Modifier(jjtThis) )*
	)
	{
		return jjtThis;
	}
}

void _Type_Tuple(SimpleNode n) #void : {} /* Tuples as primitive data types with types AND expressions: ( <expression>(,<expression>)* ) */
{
	"(" ( _Expression() ( "," _Expression() )* )? ")"
	{
		n.setType(null, TypeModifier.TUPLE, null);
	}
}

void _Type_ClassStruct(SimpleNode n) #void : /* Class and Struct data types are declared here */
{ Token t; }
{
	t = <IDENTIFIER>
	{
		n.setType("NAME:" + t.image, TypePrimitive.CLASS_STRUCT, null, null);
	}
}

void _Type_Modifier(SimpleNode n) #void : {} /* Modifiers for data types */
{
	/* Is it a pointer? */
	"*"
	{
		n.setType(null, TypeModifier.POINTER, null);
	}

	/* Or maybe a reference? */
|	"&"
	{
		n.setType(null, TypeModifier.REF, null);
	}

	/* Perhaps it could be an array? */
|	_Declaration_Object_Type_Postfix(n)
}

void _Type_Access_Modifier(SimpleNode n) #void : /* Access modifiers go here */
{ Token t; }
{
	/* The modifiers are: pub, priv and prot 
	 * (public, private and protected) */
	( t = <PUB> | t = <PRIV> | t = <PROT> )
	{
		n.setType(null, null, TypeAccessModifier.values()[t.kind - PUB + 1]);
	}
}
